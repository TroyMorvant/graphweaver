/* eslint-disable */
/* 
* This file is auto-generated by Graphweaver. 
* Please do not edit it directly.
*/
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
};

export type AdminUiEntityAttributeMetadata = {
  __typename?: 'AdminUiEntityAttributeMetadata';
  isReadOnly?: Maybe<Scalars['Boolean']['output']>;
};

export type AdminUiEntityMetadata = {
  __typename?: 'AdminUiEntityMetadata';
  attributes: AdminUiEntityAttributeMetadata;
  backendId?: Maybe<Scalars['String']['output']>;
  fields: Array<AdminUiFieldMetadata>;
  name: Scalars['String']['output'];
  summaryField?: Maybe<Scalars['String']['output']>;
};

export type AdminUiEnumMetadata = {
  __typename?: 'AdminUiEnumMetadata';
  name: Scalars['String']['output'];
  values: Array<AdminUiEnumValueMetadata>;
};

export type AdminUiEnumValueMetadata = {
  __typename?: 'AdminUiEnumValueMetadata';
  name: Scalars['String']['output'];
  value: Scalars['String']['output'];
};

export type AdminUiFieldAttributeMetadata = {
  __typename?: 'AdminUiFieldAttributeMetadata';
  isReadOnly?: Maybe<Scalars['Boolean']['output']>;
};

export type AdminUiFieldMetadata = {
  __typename?: 'AdminUiFieldMetadata';
  attributes?: Maybe<AdminUiFieldAttributeMetadata>;
  filter?: Maybe<AdminUiFilterMetadata>;
  name: Scalars['String']['output'];
  relatedEntity?: Maybe<Scalars['String']['output']>;
  relationshipType?: Maybe<Scalars['String']['output']>;
  type: Scalars['String']['output'];
};

export type AdminUiFilterMetadata = {
  __typename?: 'AdminUiFilterMetadata';
  type: AdminUiFilterType;
};

export enum AdminUiFilterType {
  Boolean = 'BOOLEAN',
  DateRange = 'DATE_RANGE',
  Enum = 'ENUM',
  Numeric = 'NUMERIC',
  Relationship = 'RELATIONSHIP',
  Text = 'TEXT'
}

export type AdminUiMetadata = {
  __typename?: 'AdminUiMetadata';
  entities: Array<AdminUiEntityMetadata>;
  enums: Array<AdminUiEnumMetadata>;
};

export type CategoriesCreateOrUpdateManyInput = {
  data: Array<CategoryCreateOrUpdateInput>;
};

export type CategoriesInsertManyInput = {
  data: Array<CategoryInsertInput>;
};

export type CategoriesListFilter = {
  _and?: InputMaybe<Array<CategoriesListFilter>>;
  _not?: InputMaybe<CategoriesListFilter>;
  _or?: InputMaybe<Array<CategoriesListFilter>>;
  id?: InputMaybe<Scalars['ID']['input']>;
  id_in?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_ne?: InputMaybe<Scalars['ID']['input']>;
  id_nin?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_notnull?: InputMaybe<Scalars['ID']['input']>;
  id_null?: InputMaybe<Scalars['ID']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  title_ilike?: InputMaybe<Scalars['String']['input']>;
  title_in?: InputMaybe<Array<Scalars['String']['input']>>;
  title_like?: InputMaybe<Scalars['String']['input']>;
  title_ne?: InputMaybe<Scalars['String']['input']>;
  title_nin?: InputMaybe<Array<Scalars['String']['input']>>;
  title_notnull?: InputMaybe<Scalars['String']['input']>;
  title_null?: InputMaybe<Scalars['String']['input']>;
};

export type CategoriesOrderByInput = {
  id?: InputMaybe<Sort>;
  title?: InputMaybe<Sort>;
};

export type CategoriesPaginationInput = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<CategoriesOrderByInput>;
};

export type CategoriesUpdateManyInput = {
  data: Array<CategoryCreateOrUpdateInput>;
};

export type Category = {
  __typename?: 'Category';
  id: Scalars['ID']['output'];
  title: Scalars['String']['output'];
};

export type CategoryCreateOrUpdateInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type CategoryInsertInput = {
  title: Scalars['String']['input'];
};

export type Interest = {
  __typename?: 'Interest';
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
};

export type InterestCreateOrUpdateInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
};

export type InterestInsertInput = {
  name: Scalars['String']['input'];
};

export type InterestsCreateOrUpdateManyInput = {
  data: Array<InterestCreateOrUpdateInput>;
};

export type InterestsInsertManyInput = {
  data: Array<InterestInsertInput>;
};

export type InterestsListFilter = {
  _and?: InputMaybe<Array<InterestsListFilter>>;
  _not?: InputMaybe<InterestsListFilter>;
  _or?: InputMaybe<Array<InterestsListFilter>>;
  id?: InputMaybe<Scalars['ID']['input']>;
  id_in?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_ne?: InputMaybe<Scalars['ID']['input']>;
  id_nin?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_notnull?: InputMaybe<Scalars['ID']['input']>;
  id_null?: InputMaybe<Scalars['ID']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  name_ilike?: InputMaybe<Scalars['String']['input']>;
  name_in?: InputMaybe<Array<Scalars['String']['input']>>;
  name_like?: InputMaybe<Scalars['String']['input']>;
  name_ne?: InputMaybe<Scalars['String']['input']>;
  name_nin?: InputMaybe<Array<Scalars['String']['input']>>;
  name_notnull?: InputMaybe<Scalars['String']['input']>;
  name_null?: InputMaybe<Scalars['String']['input']>;
};

export type InterestsOrderByInput = {
  id?: InputMaybe<Sort>;
  name?: InputMaybe<Sort>;
};

export type InterestsPaginationInput = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<InterestsOrderByInput>;
};

export type InterestsUpdateManyInput = {
  data: Array<InterestCreateOrUpdateInput>;
};

export type MailingList = {
  __typename?: 'MailingList';
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
};

export type MailingListCreateOrUpdateInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
};

export type MailingListInsertInput = {
  name: Scalars['String']['input'];
};

export type MailingListsCreateOrUpdateManyInput = {
  data: Array<MailingListCreateOrUpdateInput>;
};

export type MailingListsInsertManyInput = {
  data: Array<MailingListInsertInput>;
};

export type MailingListsListFilter = {
  _and?: InputMaybe<Array<MailingListsListFilter>>;
  _not?: InputMaybe<MailingListsListFilter>;
  _or?: InputMaybe<Array<MailingListsListFilter>>;
  id?: InputMaybe<Scalars['ID']['input']>;
  id_in?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_ne?: InputMaybe<Scalars['ID']['input']>;
  id_nin?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_notnull?: InputMaybe<Scalars['ID']['input']>;
  id_null?: InputMaybe<Scalars['ID']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  name_ilike?: InputMaybe<Scalars['String']['input']>;
  name_in?: InputMaybe<Array<Scalars['String']['input']>>;
  name_like?: InputMaybe<Scalars['String']['input']>;
  name_ne?: InputMaybe<Scalars['String']['input']>;
  name_nin?: InputMaybe<Array<Scalars['String']['input']>>;
  name_notnull?: InputMaybe<Scalars['String']['input']>;
  name_null?: InputMaybe<Scalars['String']['input']>;
};

export type MailingListsOrderByInput = {
  id?: InputMaybe<Sort>;
  name?: InputMaybe<Sort>;
};

export type MailingListsPaginationInput = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<MailingListsOrderByInput>;
};

export type MailingListsUpdateManyInput = {
  data: Array<MailingListCreateOrUpdateInput>;
};

export type Member = {
  __typename?: 'Member';
  email_address: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  status: MemberStatus;
};

export type MemberCreateOrUpdateInput = {
  email_address?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  status?: InputMaybe<MemberStatus>;
};

export type MemberInsertInput = {
  email_address: Scalars['String']['input'];
  status?: InputMaybe<MemberStatus>;
};

export enum MemberStatus {
  Cleaned = 'cleaned',
  Pending = 'pending',
  Subscribed = 'subscribed',
  Transactional = 'transactional',
  Unsubscribed = 'unsubscribed'
}

export type MembersCreateOrUpdateManyInput = {
  data: Array<MemberCreateOrUpdateInput>;
};

export type MembersInsertManyInput = {
  data: Array<MemberInsertInput>;
};

export type MembersListFilter = {
  _and?: InputMaybe<Array<MembersListFilter>>;
  _not?: InputMaybe<MembersListFilter>;
  _or?: InputMaybe<Array<MembersListFilter>>;
  email_address?: InputMaybe<Scalars['String']['input']>;
  email_address_ilike?: InputMaybe<Scalars['String']['input']>;
  email_address_in?: InputMaybe<Array<Scalars['String']['input']>>;
  email_address_like?: InputMaybe<Scalars['String']['input']>;
  email_address_ne?: InputMaybe<Scalars['String']['input']>;
  email_address_nin?: InputMaybe<Array<Scalars['String']['input']>>;
  email_address_notnull?: InputMaybe<Scalars['String']['input']>;
  email_address_null?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  id_in?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_ne?: InputMaybe<Scalars['ID']['input']>;
  id_nin?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_notnull?: InputMaybe<Scalars['ID']['input']>;
  id_null?: InputMaybe<Scalars['ID']['input']>;
  status?: InputMaybe<MemberStatus>;
  status_in?: InputMaybe<Array<MemberStatus>>;
  status_ne?: InputMaybe<MemberStatus>;
  status_nin?: InputMaybe<Array<MemberStatus>>;
  status_notnull?: InputMaybe<MemberStatus>;
  status_null?: InputMaybe<MemberStatus>;
};

export type MembersOrderByInput = {
  email_address?: InputMaybe<Sort>;
  id?: InputMaybe<Sort>;
  status?: InputMaybe<Sort>;
};

export type MembersPaginationInput = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<MembersOrderByInput>;
};

export type MembersUpdateManyInput = {
  data: Array<MemberCreateOrUpdateInput>;
};

export type Mutation = {
  __typename?: 'Mutation';
  createCategories: Array<Category>;
  createCategory: Category;
  createInterest: Interest;
  createInterests: Array<Interest>;
  createMailingList: MailingList;
  createMailingLists: Array<MailingList>;
  createMember: Member;
  createMembers: Array<Member>;
  createOrUpdateCategories: Array<Category>;
  createOrUpdateInterests: Array<Interest>;
  createOrUpdateMailingLists: Array<MailingList>;
  createOrUpdateMembers: Array<Member>;
  deleteCategory: Scalars['Boolean']['output'];
  deleteInterest: Scalars['Boolean']['output'];
  deleteMailingList: Scalars['Boolean']['output'];
  deleteMember: Scalars['Boolean']['output'];
  updateCategories: Array<Category>;
  updateCategory: Category;
  updateInterest: Interest;
  updateInterests: Array<Interest>;
  updateMailingList: MailingList;
  updateMailingLists: Array<MailingList>;
  updateMember: Member;
  updateMembers: Array<Member>;
};


export type MutationCreateCategoriesArgs = {
  input: CategoriesInsertManyInput;
};


export type MutationCreateCategoryArgs = {
  data: CategoryInsertInput;
};


export type MutationCreateInterestArgs = {
  data: InterestInsertInput;
};


export type MutationCreateInterestsArgs = {
  input: InterestsInsertManyInput;
};


export type MutationCreateMailingListArgs = {
  data: MailingListInsertInput;
};


export type MutationCreateMailingListsArgs = {
  input: MailingListsInsertManyInput;
};


export type MutationCreateMemberArgs = {
  data: MemberInsertInput;
};


export type MutationCreateMembersArgs = {
  input: MembersInsertManyInput;
};


export type MutationCreateOrUpdateCategoriesArgs = {
  input: CategoriesCreateOrUpdateManyInput;
};


export type MutationCreateOrUpdateInterestsArgs = {
  input: InterestsCreateOrUpdateManyInput;
};


export type MutationCreateOrUpdateMailingListsArgs = {
  input: MailingListsCreateOrUpdateManyInput;
};


export type MutationCreateOrUpdateMembersArgs = {
  input: MembersCreateOrUpdateManyInput;
};


export type MutationDeleteCategoryArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteInterestArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteMailingListArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteMemberArgs = {
  id: Scalars['ID']['input'];
};


export type MutationUpdateCategoriesArgs = {
  input: CategoriesUpdateManyInput;
};


export type MutationUpdateCategoryArgs = {
  data: CategoryCreateOrUpdateInput;
};


export type MutationUpdateInterestArgs = {
  data: InterestCreateOrUpdateInput;
};


export type MutationUpdateInterestsArgs = {
  input: InterestsUpdateManyInput;
};


export type MutationUpdateMailingListArgs = {
  data: MailingListCreateOrUpdateInput;
};


export type MutationUpdateMailingListsArgs = {
  input: MailingListsUpdateManyInput;
};


export type MutationUpdateMemberArgs = {
  data: MemberCreateOrUpdateInput;
};


export type MutationUpdateMembersArgs = {
  input: MembersUpdateManyInput;
};

export type Query = {
  __typename?: 'Query';
  _graphweaver: AdminUiMetadata;
  categories: Array<Category>;
  category?: Maybe<Category>;
  interest?: Maybe<Interest>;
  interests: Array<Interest>;
  mailingList?: Maybe<MailingList>;
  mailingLists: Array<MailingList>;
  member?: Maybe<Member>;
  members: Array<Member>;
};


export type QueryCategoriesArgs = {
  filter?: InputMaybe<CategoriesListFilter>;
  pagination?: InputMaybe<CategoriesPaginationInput>;
};


export type QueryCategoryArgs = {
  id: Scalars['ID']['input'];
};


export type QueryInterestArgs = {
  id: Scalars['ID']['input'];
};


export type QueryInterestsArgs = {
  filter?: InputMaybe<InterestsListFilter>;
  pagination?: InputMaybe<InterestsPaginationInput>;
};


export type QueryMailingListArgs = {
  id: Scalars['ID']['input'];
};


export type QueryMailingListsArgs = {
  filter?: InputMaybe<MailingListsListFilter>;
  pagination?: InputMaybe<MailingListsPaginationInput>;
};


export type QueryMemberArgs = {
  id: Scalars['ID']['input'];
};


export type QueryMembersArgs = {
  filter?: InputMaybe<MembersListFilter>;
  pagination?: InputMaybe<MembersPaginationInput>;
};

export enum Sort {
  Asc = 'ASC',
  Desc = 'DESC'
}
