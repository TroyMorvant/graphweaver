/* eslint-disable */
/* 
* This file is auto-generated by Graphweaver. 
* Please do not edit it directly.
*/
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: { input: any; output: any; }
};

export type AdminUiEntityAttributeMetadata = {
  __typename?: 'AdminUiEntityAttributeMetadata';
  exportPageSize?: Maybe<Scalars['Float']['output']>;
  isReadOnly?: Maybe<Scalars['Boolean']['output']>;
};

export type AdminUiEntityMetadata = {
  __typename?: 'AdminUiEntityMetadata';
  attributes: AdminUiEntityAttributeMetadata;
  backendId?: Maybe<Scalars['String']['output']>;
  defaultFilter?: Maybe<Scalars['JSON']['output']>;
  fields: Array<AdminUiFieldMetadata>;
  name: Scalars['String']['output'];
  plural: Scalars['String']['output'];
  summaryField?: Maybe<Scalars['String']['output']>;
};

export type AdminUiEnumMetadata = {
  __typename?: 'AdminUiEnumMetadata';
  name: Scalars['String']['output'];
  values: Array<AdminUiEnumValueMetadata>;
};

export type AdminUiEnumValueMetadata = {
  __typename?: 'AdminUiEnumValueMetadata';
  name: Scalars['String']['output'];
  value: Scalars['String']['output'];
};

export type AdminUiFieldAttributeMetadata = {
  __typename?: 'AdminUiFieldAttributeMetadata';
  isReadOnly: Scalars['Boolean']['output'];
  isRequired: Scalars['Boolean']['output'];
};

export type AdminUiFieldExtensionsMetadata = {
  __typename?: 'AdminUiFieldExtensionsMetadata';
  key?: Maybe<Scalars['String']['output']>;
};

export type AdminUiFieldMetadata = {
  __typename?: 'AdminUiFieldMetadata';
  attributes?: Maybe<AdminUiFieldAttributeMetadata>;
  extensions?: Maybe<AdminUiFieldExtensionsMetadata>;
  filter?: Maybe<AdminUiFilterMetadata>;
  isArray?: Maybe<Scalars['Boolean']['output']>;
  name: Scalars['String']['output'];
  relatedEntity?: Maybe<Scalars['String']['output']>;
  relationshipType?: Maybe<Scalars['String']['output']>;
  type: Scalars['String']['output'];
};

export type AdminUiFilterMetadata = {
  __typename?: 'AdminUiFilterMetadata';
  type: AdminUiFilterType;
};

export enum AdminUiFilterType {
  Boolean = 'BOOLEAN',
  DateRange = 'DATE_RANGE',
  Enum = 'ENUM',
  Numeric = 'NUMERIC',
  Relationship = 'RELATIONSHIP',
  Text = 'TEXT'
}

export type AdminUiMetadata = {
  __typename?: 'AdminUiMetadata';
  entities: Array<AdminUiEntityMetadata>;
  enums: Array<AdminUiEnumMetadata>;
};

export type MultipleAdminUiEntityAttributeMetadataOrderByInput = {
  exportPageSize?: InputMaybe<Sort>;
  isReadOnly?: InputMaybe<Sort>;
};

/** Pagination options for MultipleAdminUiEntityAttributeMetadata. */
export type MultipleAdminUiEntityAttributeMetadataPaginationInput = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<MultipleAdminUiEntityAttributeMetadataOrderByInput>;
};

export type MultipleAdminUiEntityMetadataOrderByInput = {
  backendId?: InputMaybe<Sort>;
  defaultFilter?: InputMaybe<Sort>;
  name?: InputMaybe<Sort>;
  plural?: InputMaybe<Sort>;
  summaryField?: InputMaybe<Sort>;
};

/** Pagination options for MultipleAdminUiEntityMetadata. */
export type MultipleAdminUiEntityMetadataPaginationInput = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<MultipleAdminUiEntityMetadataOrderByInput>;
};

export type MultipleAdminUiEnumMetadataOrderByInput = {
  name?: InputMaybe<Sort>;
};

/** Pagination options for MultipleAdminUiEnumMetadata. */
export type MultipleAdminUiEnumMetadataPaginationInput = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<MultipleAdminUiEnumMetadataOrderByInput>;
};

export type MultipleAdminUiEnumValueMetadataOrderByInput = {
  name?: InputMaybe<Sort>;
  value?: InputMaybe<Sort>;
};

/** Pagination options for MultipleAdminUiEnumValueMetadata. */
export type MultipleAdminUiEnumValueMetadataPaginationInput = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<MultipleAdminUiEnumValueMetadataOrderByInput>;
};

export type MultipleAdminUiFieldAttributeMetadataOrderByInput = {
  isReadOnly?: InputMaybe<Sort>;
  isRequired?: InputMaybe<Sort>;
};

/** Pagination options for MultipleAdminUiFieldAttributeMetadata. */
export type MultipleAdminUiFieldAttributeMetadataPaginationInput = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<MultipleAdminUiFieldAttributeMetadataOrderByInput>;
};

export type MultipleAdminUiFieldExtensionsMetadataOrderByInput = {
  key?: InputMaybe<Sort>;
};

/** Pagination options for MultipleAdminUiFieldExtensionsMetadata. */
export type MultipleAdminUiFieldExtensionsMetadataPaginationInput = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<MultipleAdminUiFieldExtensionsMetadataOrderByInput>;
};

export type MultipleAdminUiFieldMetadataOrderByInput = {
  isArray?: InputMaybe<Sort>;
  name?: InputMaybe<Sort>;
  relatedEntity?: InputMaybe<Sort>;
  relationshipType?: InputMaybe<Sort>;
  type?: InputMaybe<Sort>;
};

/** Pagination options for MultipleAdminUiFieldMetadata. */
export type MultipleAdminUiFieldMetadataPaginationInput = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<MultipleAdminUiFieldMetadataOrderByInput>;
};

export type MultipleAdminUiFilterMetadataOrderByInput = {
  type?: InputMaybe<Sort>;
};

/** Pagination options for MultipleAdminUiFilterMetadata. */
export type MultipleAdminUiFilterMetadataPaginationInput = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<MultipleAdminUiFilterMetadataOrderByInput>;
};

/** Pagination options for MultipleAdminUiMetadata. */
export type MultipleAdminUiMetadataPaginationInput = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
};

export type Mutation = {
  __typename?: 'Mutation';
  /** Create or update many Tasks. */
  createOrUpdateTasks?: Maybe<Array<Maybe<Task>>>;
  /** Create or update many Users. */
  createOrUpdateUsers?: Maybe<Array<Maybe<User>>>;
  /** Create a single Task. */
  createTask?: Maybe<Task>;
  /** Create a single User. */
  createUser?: Maybe<User>;
};


export type MutationCreateOrUpdateTasksArgs = {
  input: Array<TaskCreateOrUpdateInput>;
};


export type MutationCreateOrUpdateUsersArgs = {
  input: Array<UserCreateOrUpdateInput>;
};


export type MutationCreateTaskArgs = {
  input: TaskInsertInput;
};


export type MutationCreateUserArgs = {
  input: UserInsertInput;
};

export type Query = {
  __typename?: 'Query';
  /** Query used by the Admin UI to introspect the schema and metadata. */
  _graphweaver?: Maybe<AdminUiMetadata>;
  /** Get a single Task. */
  task?: Maybe<Task>;
  /** Get multiple Tasks. */
  tasks?: Maybe<Array<Maybe<Task>>>;
  /** Get a single User. */
  user?: Maybe<User>;
  /** Get multiple Users. */
  users?: Maybe<Array<Maybe<User>>>;
};


export type QueryTaskArgs = {
  id: Scalars['ID']['input'];
};


export type QueryTasksArgs = {
  filter?: InputMaybe<TasksListFilter>;
  pagination?: InputMaybe<TasksPaginationInput>;
};


export type QueryUserArgs = {
  id: Scalars['ID']['input'];
};


export type QueryUsersArgs = {
  filter?: InputMaybe<UsersListFilter>;
  pagination?: InputMaybe<UsersPaginationInput>;
};

export enum Sort {
  Asc = 'ASC',
  Desc = 'DESC'
}

export type Task = {
  __typename?: 'Task';
  description: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  isCompleted: Scalars['Boolean']['output'];
  meta?: Maybe<Scalars['JSON']['output']>;
  user: User;
};

/** Data needed to create or update Tasks. If an ID is passed, this is an update, otherwise it's an insert. */
export type TaskCreateOrUpdateInput = {
  description?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  isCompleted?: InputMaybe<Scalars['Boolean']['input']>;
  meta?: InputMaybe<Scalars['JSON']['input']>;
  user?: InputMaybe<UserInsertInput>;
};

/** Data needed to create Tasks. */
export type TaskInsertInput = {
  description: Scalars['String']['input'];
  isCompleted: Scalars['Boolean']['input'];
  meta?: InputMaybe<Scalars['JSON']['input']>;
  user: UserInsertInput;
};

export type TasksListFilter = {
  description?: InputMaybe<Scalars['String']['input']>;
  description_ilike?: InputMaybe<Scalars['String']['input']>;
  description_in?: InputMaybe<Array<Scalars['String']['input']>>;
  description_like?: InputMaybe<Scalars['String']['input']>;
  description_ne?: InputMaybe<Scalars['String']['input']>;
  description_nin?: InputMaybe<Array<Scalars['String']['input']>>;
  description_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  description_null?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  id_in?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_ne?: InputMaybe<Scalars['ID']['input']>;
  id_nin?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  id_null?: InputMaybe<Scalars['Boolean']['input']>;
  isCompleted?: InputMaybe<Scalars['Boolean']['input']>;
  isCompleted_in?: InputMaybe<Array<Scalars['Boolean']['input']>>;
  isCompleted_ne?: InputMaybe<Scalars['Boolean']['input']>;
  isCompleted_nin?: InputMaybe<Array<Scalars['Boolean']['input']>>;
  isCompleted_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  isCompleted_null?: InputMaybe<Scalars['Boolean']['input']>;
  meta?: InputMaybe<Scalars['JSON']['input']>;
  meta_in?: InputMaybe<Array<Scalars['JSON']['input']>>;
  meta_ne?: InputMaybe<Scalars['JSON']['input']>;
  meta_nin?: InputMaybe<Array<Scalars['JSON']['input']>>;
  meta_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  meta_null?: InputMaybe<Scalars['Boolean']['input']>;
  user?: InputMaybe<UsersListFilter>;
};

export type TasksOrderByInput = {
  description?: InputMaybe<Sort>;
  id?: InputMaybe<Sort>;
  isCompleted?: InputMaybe<Sort>;
  meta?: InputMaybe<Sort>;
};

/** Pagination options for Tasks. */
export type TasksPaginationInput = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<TasksOrderByInput>;
};

export type User = {
  __typename?: 'User';
  deleted: Scalars['Boolean']['output'];
  email: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  username: Scalars['String']['output'];
};

/** Data needed to create or update Users. If an ID is passed, this is an update, otherwise it's an insert. */
export type UserCreateOrUpdateInput = {
  deleted?: InputMaybe<Scalars['Boolean']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  username?: InputMaybe<Scalars['String']['input']>;
};

/** Data needed to create Users. */
export type UserInsertInput = {
  deleted?: InputMaybe<Scalars['Boolean']['input']>;
  email: Scalars['String']['input'];
  username: Scalars['String']['input'];
};

export type UsersListFilter = {
  deleted?: InputMaybe<Scalars['Boolean']['input']>;
  deleted_in?: InputMaybe<Array<Scalars['Boolean']['input']>>;
  deleted_ne?: InputMaybe<Scalars['Boolean']['input']>;
  deleted_nin?: InputMaybe<Array<Scalars['Boolean']['input']>>;
  deleted_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  deleted_null?: InputMaybe<Scalars['Boolean']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  email_ilike?: InputMaybe<Scalars['String']['input']>;
  email_in?: InputMaybe<Array<Scalars['String']['input']>>;
  email_like?: InputMaybe<Scalars['String']['input']>;
  email_ne?: InputMaybe<Scalars['String']['input']>;
  email_nin?: InputMaybe<Array<Scalars['String']['input']>>;
  email_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  email_null?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  id_in?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_ne?: InputMaybe<Scalars['ID']['input']>;
  id_nin?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  id_null?: InputMaybe<Scalars['Boolean']['input']>;
  username?: InputMaybe<Scalars['String']['input']>;
  username_ilike?: InputMaybe<Scalars['String']['input']>;
  username_in?: InputMaybe<Array<Scalars['String']['input']>>;
  username_like?: InputMaybe<Scalars['String']['input']>;
  username_ne?: InputMaybe<Scalars['String']['input']>;
  username_nin?: InputMaybe<Array<Scalars['String']['input']>>;
  username_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  username_null?: InputMaybe<Scalars['Boolean']['input']>;
};

export type UsersOrderByInput = {
  deleted?: InputMaybe<Sort>;
  email?: InputMaybe<Sort>;
  id?: InputMaybe<Sort>;
  username?: InputMaybe<Sort>;
};

/** Pagination options for Users. */
export type UsersPaginationInput = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<UsersOrderByInput>;
};
