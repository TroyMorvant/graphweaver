# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AdminUiEntityAttributeMetadata {
  isReadOnly: Boolean
}

type AdminUiEntityMetadata {
  attributes: AdminUiEntityAttributeMetadata!
  backendId: String
  fields: [AdminUiFieldMetadata!]!
  name: String!
  summaryField: String
}

type AdminUiEnumMetadata {
  name: String!
  values: [AdminUiEnumValueMetadata!]!
}

type AdminUiEnumValueMetadata {
  name: String!
  value: String!
}

type AdminUiFieldAttributeMetadata {
  isReadOnly: Boolean
}

type AdminUiFieldMetadata {
  attributes: AdminUiFieldAttributeMetadata
  filter: AdminUiFilterMetadata
  name: String!
  relatedEntity: String
  relationshipType: String
  type: String!
}

type AdminUiFilterMetadata {
  type: AdminUiFilterType!
}

enum AdminUiFilterType {
  BOOLEAN
  DATE_RANGE
  ENUM
  NUMERIC
  RELATIONSHIP
  TEXT
}

type AdminUiMetadata {
  entities: [AdminUiEntityMetadata!]!
  enums: [AdminUiEnumMetadata!]!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Mutation {
  createOrUpdateTasks(input: TasksCreateOrUpdateManyInput!): [Task!]!
  createOrUpdateUsers(input: UsersCreateOrUpdateManyInput!): [User!]!
  createTask(data: TaskInsertInput!): Task!
  createTasks(input: TasksInsertManyInput!): [Task!]!
  createUser(data: UserInsertInput!): User!
  createUsers(input: UsersInsertManyInput!): [User!]!
  deleteTask(id: ID!): Boolean!
  deleteUser(id: ID!): Boolean!
  updateTask(data: TaskCreateOrUpdateInput!): Task!
  updateTasks(input: TasksUpdateManyInput!): [Task!]!
  updateUser(data: UserCreateOrUpdateInput!): User!
  updateUsers(input: UsersUpdateManyInput!): [User!]!
}

type Query {
  _graphweaver: AdminUiMetadata!
  task(id: ID!): Task
  tasks(filter: TasksListFilter, pagination: TasksPaginationInput): [Task!]!
  user(id: ID!): User
  users(filter: UsersListFilter, pagination: UsersPaginationInput): [User!]!
}

enum Sort {
  ASC
  DESC
}

type Task {
  description: String!
  id: ID!
  isCompleted: Boolean!
  meta: JSON!

  """"""
  user(
    """Filter the related entities"""
    filter: UsersListFilter
  ): User
}

input TaskCreateOrUpdateInput {
  description: String
  id: ID
  isCompleted: Boolean
  meta: JSON

  """"""
  user: UserCreateOrUpdateInput
}

input TaskInsertInput {
  description: String!
  isCompleted: Boolean
  meta: JSON

  """"""
  user: UserCreateOrUpdateInput
}

input TasksCreateOrUpdateManyInput {
  data: [TaskCreateOrUpdateInput!]!
}

input TasksInsertManyInput {
  data: [TaskInsertInput!]!
}

input TasksListFilter {
  _and: [TasksListFilter!]
  _not: TasksListFilter
  _or: [TasksListFilter!]
  description: String
  description_ilike: String
  description_in: [String!]
  description_like: String
  description_ne: String
  description_nin: [String!]
  description_notnull: String
  description_null: String
  id: ID
  id_in: [ID!]
  id_ne: ID
  id_nin: [ID!]
  id_notnull: ID
  id_null: ID
  isCompleted: Boolean
  meta: JSON

  """"""
  user: UsersListFilter
}

input TasksOrderByInput {
  description: Sort
  id: Sort
}

input TasksPaginationInput {
  limit: Int
  offset: Int
  orderBy: TasksOrderByInput
}

input TasksUpdateManyInput {
  data: [TaskCreateOrUpdateInput!]!
}

type User {
  email: String!
  id: ID!
  username: String!
}

input UserCreateOrUpdateInput {
  email: String
  id: ID
  username: String
}

input UserInsertInput {
  email: String!
  username: String!
}

input UsersCreateOrUpdateManyInput {
  data: [UserCreateOrUpdateInput!]!
}

input UsersInsertManyInput {
  data: [UserInsertInput!]!
}

input UsersListFilter {
  _and: [UsersListFilter!]
  _not: UsersListFilter
  _or: [UsersListFilter!]
  email: String
  email_ilike: String
  email_in: [String!]
  email_like: String
  email_ne: String
  email_nin: [String!]
  email_notnull: String
  email_null: String
  id: ID
  id_in: [ID!]
  id_ne: ID
  id_nin: [ID!]
  id_notnull: ID
  id_null: ID
  username: String
  username_ilike: String
  username_in: [String!]
  username_like: String
  username_ne: String
  username_nin: [String!]
  username_notnull: String
  username_null: String
}

input UsersOrderByInput {
  email: Sort
  id: Sort
  username: Sort
}

input UsersPaginationInput {
  limit: Int
  offset: Int
  orderBy: UsersOrderByInput
}

input UsersUpdateManyInput {
  data: [UserCreateOrUpdateInput!]!
}