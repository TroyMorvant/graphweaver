/* 
* This file is auto-generated by Graphweaver. 
* Please do not edit it directly.
*/
import * as Types from '../../../../types.generated';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
const defaultOptions = {} as const;
export type GenrePopularityQueryVariables = Types.Exact<{ [key: string]: never; }>;


export type GenrePopularityQuery = { __typename?: 'Query', genres?: Array<{ __typename?: 'Genre', genreId: string, name?: string | null, tracks: Array<{ __typename?: 'Track', trackId: string, invoiceLines: Array<{ __typename?: 'InvoiceLine', invoiceLineId: string, quantity: number }> }>, tracks_aggregate?: { __typename?: 'AggregationResult', count: number } | null } | null> | null };


export const GenrePopularityDocument = gql`
    query genrePopularity {
  genres {
    genreId
    name
    tracks {
      trackId
      invoiceLines {
        invoiceLineId
        quantity
      }
    }
    tracks_aggregate {
      count
    }
  }
}
    `;

/**
 * __useGenrePopularityQuery__
 *
 * To run a query within a React component, call `useGenrePopularityQuery` and pass it any options that fit your needs.
 * When your component renders, `useGenrePopularityQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGenrePopularityQuery({
 *   variables: {
 *   },
 * });
 */
export function useGenrePopularityQuery(baseOptions?: Apollo.QueryHookOptions<GenrePopularityQuery, GenrePopularityQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GenrePopularityQuery, GenrePopularityQueryVariables>(GenrePopularityDocument, options);
      }
export function useGenrePopularityLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GenrePopularityQuery, GenrePopularityQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GenrePopularityQuery, GenrePopularityQueryVariables>(GenrePopularityDocument, options);
        }
export function useGenrePopularitySuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GenrePopularityQuery, GenrePopularityQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GenrePopularityQuery, GenrePopularityQueryVariables>(GenrePopularityDocument, options);
        }
export type GenrePopularityQueryHookResult = ReturnType<typeof useGenrePopularityQuery>;
export type GenrePopularityLazyQueryHookResult = ReturnType<typeof useGenrePopularityLazyQuery>;
export type GenrePopularitySuspenseQueryHookResult = ReturnType<typeof useGenrePopularitySuspenseQuery>;
export type GenrePopularityQueryResult = Apollo.QueryResult<GenrePopularityQuery, GenrePopularityQueryVariables>;