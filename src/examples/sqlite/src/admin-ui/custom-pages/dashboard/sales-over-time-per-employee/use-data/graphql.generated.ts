/* 
* This file is auto-generated by Graphweaver. 
* Please do not edit it directly.
*/
import * as Types from '../../../../../types.generated';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
const defaultOptions = {} as const;
export type SalesPerEmployeeQueryVariables = Types.Exact<{ [key: string]: never; }>;


export type SalesPerEmployeeQuery = { __typename?: 'Query', employees?: Array<{ __typename?: 'Employee', employeeId: string, firstName: string, lastName: string, customers: Array<{ __typename?: 'Customer', customerId: string, invoices: Array<{ __typename?: 'Invoice', invoiceId: string, invoiceDate: any, total: string }> }> } | null> | null };


export const SalesPerEmployeeDocument = gql`
    query salesPerEmployee {
  employees {
    employeeId
    firstName
    lastName
    customers {
      customerId
      invoices {
        invoiceId
        invoiceDate
        total
      }
    }
  }
}
    `;

/**
 * __useSalesPerEmployeeQuery__
 *
 * To run a query within a React component, call `useSalesPerEmployeeQuery` and pass it any options that fit your needs.
 * When your component renders, `useSalesPerEmployeeQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSalesPerEmployeeQuery({
 *   variables: {
 *   },
 * });
 */
export function useSalesPerEmployeeQuery(baseOptions?: Apollo.QueryHookOptions<SalesPerEmployeeQuery, SalesPerEmployeeQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<SalesPerEmployeeQuery, SalesPerEmployeeQueryVariables>(SalesPerEmployeeDocument, options);
      }
export function useSalesPerEmployeeLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SalesPerEmployeeQuery, SalesPerEmployeeQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<SalesPerEmployeeQuery, SalesPerEmployeeQueryVariables>(SalesPerEmployeeDocument, options);
        }
export function useSalesPerEmployeeSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<SalesPerEmployeeQuery, SalesPerEmployeeQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<SalesPerEmployeeQuery, SalesPerEmployeeQueryVariables>(SalesPerEmployeeDocument, options);
        }
export type SalesPerEmployeeQueryHookResult = ReturnType<typeof useSalesPerEmployeeQuery>;
export type SalesPerEmployeeLazyQueryHookResult = ReturnType<typeof useSalesPerEmployeeLazyQuery>;
export type SalesPerEmployeeSuspenseQueryHookResult = ReturnType<typeof useSalesPerEmployeeSuspenseQuery>;
export type SalesPerEmployeeQueryResult = Apollo.QueryResult<SalesPerEmployeeQuery, SalesPerEmployeeQueryVariables>;