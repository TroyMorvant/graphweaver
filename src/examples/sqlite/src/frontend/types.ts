/* eslint-disable */
/* 
* This file is auto-generated by Graphweaver. 
* Please do not edit it directly.
*/
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** Returns a string in simplified extended ISO format (ISO 8601), which is always 24 or 27 characters long (YYYY-MM-DDTHH:mm:ss.sssZ or Â±YYYYYY-MM-DDTHH:mm:ss.sssZ, respectively). The timezone is always zero UTC offset, as denoted by the suffix "Z". */
  ISOString: { input: any; output: any; }
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: { input: any; output: any; }
};

export type AdminUiEntityAttributeMetadata = {
  __typename?: 'AdminUiEntityAttributeMetadata';
  exportPageSize?: Maybe<Scalars['Float']['output']>;
  isReadOnly?: Maybe<Scalars['Boolean']['output']>;
};

export type AdminUiEntityMetadata = {
  __typename?: 'AdminUiEntityMetadata';
  attributes: AdminUiEntityAttributeMetadata;
  backendId?: Maybe<Scalars['String']['output']>;
  defaultFilter?: Maybe<Scalars['JSON']['output']>;
  fields: Array<AdminUiFieldMetadata>;
  name: Scalars['String']['output'];
  plural: Scalars['String']['output'];
  summaryField?: Maybe<Scalars['String']['output']>;
};

export type AdminUiEnumMetadata = {
  __typename?: 'AdminUiEnumMetadata';
  name: Scalars['String']['output'];
  values: Array<AdminUiEnumValueMetadata>;
};

export type AdminUiEnumValueMetadata = {
  __typename?: 'AdminUiEnumValueMetadata';
  name: Scalars['String']['output'];
  value: Scalars['String']['output'];
};

export type AdminUiFieldAttributeMetadata = {
  __typename?: 'AdminUiFieldAttributeMetadata';
  isReadOnly: Scalars['Boolean']['output'];
  isRequired: Scalars['Boolean']['output'];
};

export type AdminUiFieldExtensionsMetadata = {
  __typename?: 'AdminUiFieldExtensionsMetadata';
  key?: Maybe<Scalars['String']['output']>;
};

export type AdminUiFieldMetadata = {
  __typename?: 'AdminUiFieldMetadata';
  attributes?: Maybe<AdminUiFieldAttributeMetadata>;
  extensions?: Maybe<AdminUiFieldExtensionsMetadata>;
  filter?: Maybe<AdminUiFilterMetadata>;
  isArray?: Maybe<Scalars['Boolean']['output']>;
  name: Scalars['String']['output'];
  relatedEntity?: Maybe<Scalars['String']['output']>;
  relationshipType?: Maybe<Scalars['String']['output']>;
  type: Scalars['String']['output'];
};

export type AdminUiFilterMetadata = {
  __typename?: 'AdminUiFilterMetadata';
  type: AdminUiFilterType;
};

export enum AdminUiFilterType {
  Boolean = 'BOOLEAN',
  DateRange = 'DATE_RANGE',
  Enum = 'ENUM',
  Numeric = 'NUMERIC',
  Relationship = 'RELATIONSHIP',
  Text = 'TEXT'
}

export type AdminUiMetadata = {
  __typename?: 'AdminUiMetadata';
  entities: Array<AdminUiEntityMetadata>;
  enums: Array<AdminUiEnumMetadata>;
};

export type Album = {
  __typename?: 'Album';
  artist: Artist;
  id: Scalars['ID']['output'];
  title: Scalars['String']['output'];
  tracks: Array<Track>;
};

/** Data needed to create Albums. */
export type AlbumInsertInput = {
  artist?: InputMaybe<ArtistInsertInput>;
  title?: InputMaybe<Scalars['String']['input']>;
  tracks?: InputMaybe<TrackInsertInput>;
};

export type AlbumsListFilter = {
  artist?: InputMaybe<ArtistsListFilter>;
  id_in?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_ne?: InputMaybe<Scalars['ID']['input']>;
  id_nin?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  id_null?: InputMaybe<Scalars['Boolean']['input']>;
  tracks?: InputMaybe<TracksListFilter>;
};

export type AlbumsOrderByInput = {
  id?: InputMaybe<Sort>;
  title?: InputMaybe<Sort>;
};

/** Pagination options for Albums. */
export type AlbumsPaginationInput = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<AlbumsOrderByInput>;
};

export type Artist = {
  __typename?: 'Artist';
  albums: Array<Album>;
  id: Scalars['ID']['output'];
  name?: Maybe<Scalars['String']['output']>;
};

/** Data needed to create Artists. */
export type ArtistInsertInput = {
  albums?: InputMaybe<AlbumInsertInput>;
  name?: InputMaybe<Scalars['String']['input']>;
};

export type ArtistsListFilter = {
  albums?: InputMaybe<AlbumsListFilter>;
  id_in?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_ne?: InputMaybe<Scalars['ID']['input']>;
  id_nin?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  id_null?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ArtistsOrderByInput = {
  id?: InputMaybe<Sort>;
  name?: InputMaybe<Sort>;
};

/** Pagination options for Artists. */
export type ArtistsPaginationInput = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<ArtistsOrderByInput>;
};

export type Customer = {
  __typename?: 'Customer';
  address?: Maybe<Scalars['String']['output']>;
  city?: Maybe<Scalars['String']['output']>;
  company?: Maybe<Scalars['String']['output']>;
  country?: Maybe<Scalars['String']['output']>;
  email: Scalars['String']['output'];
  employee?: Maybe<Employee>;
  fax?: Maybe<Scalars['String']['output']>;
  firstName: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  invoices: Array<Invoice>;
  lastName: Scalars['String']['output'];
  phone?: Maybe<Scalars['String']['output']>;
  postalCode?: Maybe<Scalars['String']['output']>;
  state?: Maybe<Scalars['String']['output']>;
};

/** Data needed to create Customers. */
export type CustomerInsertInput = {
  address?: InputMaybe<Scalars['String']['input']>;
  city?: InputMaybe<Scalars['String']['input']>;
  company?: InputMaybe<Scalars['String']['input']>;
  country?: InputMaybe<Scalars['String']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  employee?: InputMaybe<EmployeeInsertInput>;
  fax?: InputMaybe<Scalars['String']['input']>;
  firstName?: InputMaybe<Scalars['String']['input']>;
  invoices?: InputMaybe<InvoiceInsertInput>;
  lastName?: InputMaybe<Scalars['String']['input']>;
  phone?: InputMaybe<Scalars['String']['input']>;
  postalCode?: InputMaybe<Scalars['String']['input']>;
  state?: InputMaybe<Scalars['String']['input']>;
};

export type CustomersListFilter = {
  employee?: InputMaybe<EmployeesListFilter>;
  id_in?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_ne?: InputMaybe<Scalars['ID']['input']>;
  id_nin?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  id_null?: InputMaybe<Scalars['Boolean']['input']>;
  invoices?: InputMaybe<InvoicesListFilter>;
};

export type CustomersOrderByInput = {
  address?: InputMaybe<Sort>;
  city?: InputMaybe<Sort>;
  company?: InputMaybe<Sort>;
  country?: InputMaybe<Sort>;
  email?: InputMaybe<Sort>;
  fax?: InputMaybe<Sort>;
  firstName?: InputMaybe<Sort>;
  id?: InputMaybe<Sort>;
  lastName?: InputMaybe<Sort>;
  phone?: InputMaybe<Sort>;
  postalCode?: InputMaybe<Sort>;
  state?: InputMaybe<Sort>;
};

/** Pagination options for Customers. */
export type CustomersPaginationInput = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<CustomersOrderByInput>;
};

export type Employee = {
  __typename?: 'Employee';
  address?: Maybe<Scalars['String']['output']>;
  birthDate?: Maybe<Scalars['ISOString']['output']>;
  city?: Maybe<Scalars['String']['output']>;
  country?: Maybe<Scalars['String']['output']>;
  customers: Array<Customer>;
  email?: Maybe<Scalars['String']['output']>;
  employee?: Maybe<Employee>;
  employees: Array<Employee>;
  fax?: Maybe<Scalars['String']['output']>;
  firstName: Scalars['String']['output'];
  hireDate?: Maybe<Scalars['ISOString']['output']>;
  id: Scalars['ID']['output'];
  lastName: Scalars['String']['output'];
  phone?: Maybe<Scalars['String']['output']>;
  postalCode?: Maybe<Scalars['String']['output']>;
  state?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
};

/** Data needed to create Employees. */
export type EmployeeInsertInput = {
  address?: InputMaybe<Scalars['String']['input']>;
  birthDate?: InputMaybe<Scalars['ISOString']['input']>;
  city?: InputMaybe<Scalars['String']['input']>;
  country?: InputMaybe<Scalars['String']['input']>;
  customers?: InputMaybe<CustomerInsertInput>;
  email?: InputMaybe<Scalars['String']['input']>;
  employee?: InputMaybe<EmployeeInsertInput>;
  employees?: InputMaybe<EmployeeInsertInput>;
  fax?: InputMaybe<Scalars['String']['input']>;
  firstName?: InputMaybe<Scalars['String']['input']>;
  hireDate?: InputMaybe<Scalars['ISOString']['input']>;
  lastName?: InputMaybe<Scalars['String']['input']>;
  phone?: InputMaybe<Scalars['String']['input']>;
  postalCode?: InputMaybe<Scalars['String']['input']>;
  state?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type EmployeesListFilter = {
  birthDate_gt?: InputMaybe<Scalars['ISOString']['input']>;
  birthDate_gte?: InputMaybe<Scalars['ISOString']['input']>;
  birthDate_in?: InputMaybe<Array<Scalars['ISOString']['input']>>;
  birthDate_lt?: InputMaybe<Scalars['ISOString']['input']>;
  birthDate_lte?: InputMaybe<Scalars['ISOString']['input']>;
  birthDate_ne?: InputMaybe<Scalars['ISOString']['input']>;
  birthDate_nin?: InputMaybe<Array<Scalars['ISOString']['input']>>;
  birthDate_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  birthDate_null?: InputMaybe<Scalars['Boolean']['input']>;
  customers?: InputMaybe<CustomersListFilter>;
  employee?: InputMaybe<EmployeesListFilter>;
  employees?: InputMaybe<EmployeesListFilter>;
  hireDate_gt?: InputMaybe<Scalars['ISOString']['input']>;
  hireDate_gte?: InputMaybe<Scalars['ISOString']['input']>;
  hireDate_in?: InputMaybe<Array<Scalars['ISOString']['input']>>;
  hireDate_lt?: InputMaybe<Scalars['ISOString']['input']>;
  hireDate_lte?: InputMaybe<Scalars['ISOString']['input']>;
  hireDate_ne?: InputMaybe<Scalars['ISOString']['input']>;
  hireDate_nin?: InputMaybe<Array<Scalars['ISOString']['input']>>;
  hireDate_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  hireDate_null?: InputMaybe<Scalars['Boolean']['input']>;
  id_in?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_ne?: InputMaybe<Scalars['ID']['input']>;
  id_nin?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  id_null?: InputMaybe<Scalars['Boolean']['input']>;
};

export type EmployeesOrderByInput = {
  address?: InputMaybe<Sort>;
  birthDate?: InputMaybe<Sort>;
  city?: InputMaybe<Sort>;
  country?: InputMaybe<Sort>;
  email?: InputMaybe<Sort>;
  fax?: InputMaybe<Sort>;
  firstName?: InputMaybe<Sort>;
  hireDate?: InputMaybe<Sort>;
  id?: InputMaybe<Sort>;
  lastName?: InputMaybe<Sort>;
  phone?: InputMaybe<Sort>;
  postalCode?: InputMaybe<Sort>;
  state?: InputMaybe<Sort>;
  title?: InputMaybe<Sort>;
};

/** Pagination options for Employees. */
export type EmployeesPaginationInput = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<EmployeesOrderByInput>;
};

export type Genre = {
  __typename?: 'Genre';
  id: Scalars['ID']['output'];
  name?: Maybe<Scalars['String']['output']>;
  tracks: Array<Track>;
};

/** Data needed to create Genres. */
export type GenreInsertInput = {
  name?: InputMaybe<Scalars['String']['input']>;
  tracks?: InputMaybe<TrackInsertInput>;
};

export type GenresListFilter = {
  id_in?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_ne?: InputMaybe<Scalars['ID']['input']>;
  id_nin?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  id_null?: InputMaybe<Scalars['Boolean']['input']>;
  tracks?: InputMaybe<TracksListFilter>;
};

export type GenresOrderByInput = {
  id?: InputMaybe<Sort>;
  name?: InputMaybe<Sort>;
};

/** Pagination options for Genres. */
export type GenresPaginationInput = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<GenresOrderByInput>;
};

export type Invoice = {
  __typename?: 'Invoice';
  billingAddress?: Maybe<Scalars['String']['output']>;
  billingCity?: Maybe<Scalars['String']['output']>;
  billingCountry?: Maybe<Scalars['String']['output']>;
  billingPostalCode?: Maybe<Scalars['String']['output']>;
  billingState?: Maybe<Scalars['String']['output']>;
  customer: Customer;
  id: Scalars['ID']['output'];
  invoiceDate: Scalars['ISOString']['output'];
  invoiceLines: Array<InvoiceLine>;
  total: Scalars['String']['output'];
};

/** Data needed to create Invoices. */
export type InvoiceInsertInput = {
  billingAddress?: InputMaybe<Scalars['String']['input']>;
  billingCity?: InputMaybe<Scalars['String']['input']>;
  billingCountry?: InputMaybe<Scalars['String']['input']>;
  billingPostalCode?: InputMaybe<Scalars['String']['input']>;
  billingState?: InputMaybe<Scalars['String']['input']>;
  customer?: InputMaybe<CustomerInsertInput>;
  invoiceDate?: InputMaybe<Scalars['ISOString']['input']>;
  invoiceLines?: InputMaybe<InvoiceLineInsertInput>;
  total?: InputMaybe<Scalars['String']['input']>;
};

export type InvoiceLine = {
  __typename?: 'InvoiceLine';
  id: Scalars['ID']['output'];
  invoice: Invoice;
  quantity: Scalars['Float']['output'];
  track: Track;
  unitPrice: Scalars['String']['output'];
};

/** Data needed to create InvoiceLines. */
export type InvoiceLineInsertInput = {
  invoice?: InputMaybe<InvoiceInsertInput>;
  quantity?: InputMaybe<Scalars['Float']['input']>;
  track?: InputMaybe<TrackInsertInput>;
  unitPrice?: InputMaybe<Scalars['String']['input']>;
};

export type InvoiceLinesListFilter = {
  id_in?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_ne?: InputMaybe<Scalars['ID']['input']>;
  id_nin?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  id_null?: InputMaybe<Scalars['Boolean']['input']>;
  invoice?: InputMaybe<InvoicesListFilter>;
  track?: InputMaybe<TracksListFilter>;
};

export type InvoiceLinesOrderByInput = {
  id?: InputMaybe<Sort>;
  quantity?: InputMaybe<Sort>;
  unitPrice?: InputMaybe<Sort>;
};

/** Pagination options for InvoiceLines. */
export type InvoiceLinesPaginationInput = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<InvoiceLinesOrderByInput>;
};

export type InvoicesListFilter = {
  customer?: InputMaybe<CustomersListFilter>;
  id_in?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_ne?: InputMaybe<Scalars['ID']['input']>;
  id_nin?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  id_null?: InputMaybe<Scalars['Boolean']['input']>;
  invoiceDate_gt?: InputMaybe<Scalars['ISOString']['input']>;
  invoiceDate_gte?: InputMaybe<Scalars['ISOString']['input']>;
  invoiceDate_in?: InputMaybe<Array<Scalars['ISOString']['input']>>;
  invoiceDate_lt?: InputMaybe<Scalars['ISOString']['input']>;
  invoiceDate_lte?: InputMaybe<Scalars['ISOString']['input']>;
  invoiceDate_ne?: InputMaybe<Scalars['ISOString']['input']>;
  invoiceDate_nin?: InputMaybe<Array<Scalars['ISOString']['input']>>;
  invoiceDate_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  invoiceDate_null?: InputMaybe<Scalars['Boolean']['input']>;
  invoiceLines?: InputMaybe<InvoiceLinesListFilter>;
};

export type InvoicesOrderByInput = {
  billingAddress?: InputMaybe<Sort>;
  billingCity?: InputMaybe<Sort>;
  billingCountry?: InputMaybe<Sort>;
  billingPostalCode?: InputMaybe<Sort>;
  billingState?: InputMaybe<Sort>;
  id?: InputMaybe<Sort>;
  invoiceDate?: InputMaybe<Sort>;
  total?: InputMaybe<Sort>;
};

/** Pagination options for Invoices. */
export type InvoicesPaginationInput = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<InvoicesOrderByInput>;
};

export type MediaType = {
  __typename?: 'MediaType';
  id: Scalars['ID']['output'];
  name?: Maybe<Scalars['String']['output']>;
  tracks: Array<Track>;
};

/** Data needed to create MediaTypes. */
export type MediaTypeInsertInput = {
  name?: InputMaybe<Scalars['String']['input']>;
  tracks?: InputMaybe<TrackInsertInput>;
};

export type MediaTypesListFilter = {
  id_in?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_ne?: InputMaybe<Scalars['ID']['input']>;
  id_nin?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  id_null?: InputMaybe<Scalars['Boolean']['input']>;
  tracks?: InputMaybe<TracksListFilter>;
};

export type MediaTypesOrderByInput = {
  id?: InputMaybe<Sort>;
  name?: InputMaybe<Sort>;
};

/** Pagination options for MediaTypes. */
export type MediaTypesPaginationInput = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<MediaTypesOrderByInput>;
};

export type MultipleAdminUiEntityAttributeMetadataOrderByInput = {
  exportPageSize?: InputMaybe<Sort>;
  isReadOnly?: InputMaybe<Sort>;
};

/** Pagination options for MultipleAdminUiEntityAttributeMetadata. */
export type MultipleAdminUiEntityAttributeMetadataPaginationInput = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<MultipleAdminUiEntityAttributeMetadataOrderByInput>;
};

export type MultipleAdminUiEntityMetadataOrderByInput = {
  backendId?: InputMaybe<Sort>;
  defaultFilter?: InputMaybe<Sort>;
  name?: InputMaybe<Sort>;
  plural?: InputMaybe<Sort>;
  summaryField?: InputMaybe<Sort>;
};

/** Pagination options for MultipleAdminUiEntityMetadata. */
export type MultipleAdminUiEntityMetadataPaginationInput = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<MultipleAdminUiEntityMetadataOrderByInput>;
};

export type MultipleAdminUiEnumMetadataOrderByInput = {
  name?: InputMaybe<Sort>;
};

/** Pagination options for MultipleAdminUiEnumMetadata. */
export type MultipleAdminUiEnumMetadataPaginationInput = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<MultipleAdminUiEnumMetadataOrderByInput>;
};

export type MultipleAdminUiEnumValueMetadataOrderByInput = {
  name?: InputMaybe<Sort>;
  value?: InputMaybe<Sort>;
};

/** Pagination options for MultipleAdminUiEnumValueMetadata. */
export type MultipleAdminUiEnumValueMetadataPaginationInput = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<MultipleAdminUiEnumValueMetadataOrderByInput>;
};

export type MultipleAdminUiFieldAttributeMetadataOrderByInput = {
  isReadOnly?: InputMaybe<Sort>;
  isRequired?: InputMaybe<Sort>;
};

/** Pagination options for MultipleAdminUiFieldAttributeMetadata. */
export type MultipleAdminUiFieldAttributeMetadataPaginationInput = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<MultipleAdminUiFieldAttributeMetadataOrderByInput>;
};

export type MultipleAdminUiFieldExtensionsMetadataOrderByInput = {
  key?: InputMaybe<Sort>;
};

/** Pagination options for MultipleAdminUiFieldExtensionsMetadata. */
export type MultipleAdminUiFieldExtensionsMetadataPaginationInput = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<MultipleAdminUiFieldExtensionsMetadataOrderByInput>;
};

export type MultipleAdminUiFieldMetadataOrderByInput = {
  isArray?: InputMaybe<Sort>;
  name?: InputMaybe<Sort>;
  relatedEntity?: InputMaybe<Sort>;
  relationshipType?: InputMaybe<Sort>;
  type?: InputMaybe<Sort>;
};

/** Pagination options for MultipleAdminUiFieldMetadata. */
export type MultipleAdminUiFieldMetadataPaginationInput = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<MultipleAdminUiFieldMetadataOrderByInput>;
};

export type MultipleAdminUiFilterMetadataOrderByInput = {
  type?: InputMaybe<Sort>;
};

/** Pagination options for MultipleAdminUiFilterMetadata. */
export type MultipleAdminUiFilterMetadataPaginationInput = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<MultipleAdminUiFilterMetadataOrderByInput>;
};

/** Pagination options for MultipleAdminUiMetadata. */
export type MultipleAdminUiMetadataPaginationInput = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
};

export type Mutation = {
  __typename?: 'Mutation';
  /** Create a single Album. */
  createAlbum?: Maybe<Album>;
  /** Create a single Artist. */
  createArtist?: Maybe<Artist>;
  /** Create a single Customer. */
  createCustomer?: Maybe<Customer>;
  /** Create a single Employee. */
  createEmployee?: Maybe<Employee>;
  /** Create a single Genre. */
  createGenre?: Maybe<Genre>;
  /** Create a single Invoice. */
  createInvoice?: Maybe<Invoice>;
  /** Create a single InvoiceLine. */
  createInvoiceLine?: Maybe<InvoiceLine>;
  /** Create a single MediaType. */
  createMediaType?: Maybe<MediaType>;
  /** Create a single Playlist. */
  createPlaylist?: Maybe<Playlist>;
  /** Create a single Track. */
  createTrack?: Maybe<Track>;
};


export type MutationCreateAlbumArgs = {
  data: AlbumInsertInput;
};


export type MutationCreateArtistArgs = {
  data: ArtistInsertInput;
};


export type MutationCreateCustomerArgs = {
  data: CustomerInsertInput;
};


export type MutationCreateEmployeeArgs = {
  data: EmployeeInsertInput;
};


export type MutationCreateGenreArgs = {
  data: GenreInsertInput;
};


export type MutationCreateInvoiceArgs = {
  data: InvoiceInsertInput;
};


export type MutationCreateInvoiceLineArgs = {
  data: InvoiceLineInsertInput;
};


export type MutationCreateMediaTypeArgs = {
  data: MediaTypeInsertInput;
};


export type MutationCreatePlaylistArgs = {
  data: PlaylistInsertInput;
};


export type MutationCreateTrackArgs = {
  data: TrackInsertInput;
};

export type Playlist = {
  __typename?: 'Playlist';
  id: Scalars['ID']['output'];
  name?: Maybe<Scalars['String']['output']>;
  tracks: Array<Track>;
};

/** Data needed to create Playlists. */
export type PlaylistInsertInput = {
  name?: InputMaybe<Scalars['String']['input']>;
  tracks?: InputMaybe<TrackInsertInput>;
};

export type PlaylistsListFilter = {
  id_in?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_ne?: InputMaybe<Scalars['ID']['input']>;
  id_nin?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  id_null?: InputMaybe<Scalars['Boolean']['input']>;
  tracks?: InputMaybe<TracksListFilter>;
};

export type PlaylistsOrderByInput = {
  id?: InputMaybe<Sort>;
  name?: InputMaybe<Sort>;
};

/** Pagination options for Playlists. */
export type PlaylistsPaginationInput = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<PlaylistsOrderByInput>;
};

export type Query = {
  __typename?: 'Query';
  /** Query used by the Admin UI to introspect the schema and metadata. */
  _graphweaver?: Maybe<AdminUiMetadata>;
  /** Get a single Album. */
  album?: Maybe<Album>;
  /** Get multiple Albums. */
  albums?: Maybe<Array<Maybe<Album>>>;
  /** Get a single Artist. */
  artist?: Maybe<Artist>;
  /** Get multiple Artists. */
  artists?: Maybe<Array<Maybe<Artist>>>;
  /** Get a single Customer. */
  customer?: Maybe<Customer>;
  /** Get multiple Customers. */
  customers?: Maybe<Array<Maybe<Customer>>>;
  /** Get a single Employee. */
  employee?: Maybe<Employee>;
  /** Get multiple Employees. */
  employees?: Maybe<Array<Maybe<Employee>>>;
  /** Get a single Genre. */
  genre?: Maybe<Genre>;
  /** Get multiple Genres. */
  genres?: Maybe<Array<Maybe<Genre>>>;
  /** Get a single Invoice. */
  invoice?: Maybe<Invoice>;
  /** Get a single InvoiceLine. */
  invoiceLine?: Maybe<InvoiceLine>;
  /** Get multiple InvoiceLines. */
  invoiceLines?: Maybe<Array<Maybe<InvoiceLine>>>;
  /** Get multiple Invoices. */
  invoices?: Maybe<Array<Maybe<Invoice>>>;
  /** Get a single MediaType. */
  mediaType?: Maybe<MediaType>;
  /** Get multiple MediaTypes. */
  mediaTypes?: Maybe<Array<Maybe<MediaType>>>;
  /** Get a single Playlist. */
  playlist?: Maybe<Playlist>;
  /** Get multiple Playlists. */
  playlists?: Maybe<Array<Maybe<Playlist>>>;
  /** Get a single Track. */
  track?: Maybe<Track>;
  /** Get multiple Tracks. */
  tracks?: Maybe<Array<Maybe<Track>>>;
};


export type QueryAlbumArgs = {
  id: Scalars['ID']['input'];
};


export type QueryAlbumsArgs = {
  filter?: InputMaybe<AlbumsListFilter>;
  pagination?: InputMaybe<AlbumsPaginationInput>;
};


export type QueryArtistArgs = {
  id: Scalars['ID']['input'];
};


export type QueryArtistsArgs = {
  filter?: InputMaybe<ArtistsListFilter>;
  pagination?: InputMaybe<ArtistsPaginationInput>;
};


export type QueryCustomerArgs = {
  id: Scalars['ID']['input'];
};


export type QueryCustomersArgs = {
  filter?: InputMaybe<CustomersListFilter>;
  pagination?: InputMaybe<CustomersPaginationInput>;
};


export type QueryEmployeeArgs = {
  id: Scalars['ID']['input'];
};


export type QueryEmployeesArgs = {
  filter?: InputMaybe<EmployeesListFilter>;
  pagination?: InputMaybe<EmployeesPaginationInput>;
};


export type QueryGenreArgs = {
  id: Scalars['ID']['input'];
};


export type QueryGenresArgs = {
  filter?: InputMaybe<GenresListFilter>;
  pagination?: InputMaybe<GenresPaginationInput>;
};


export type QueryInvoiceArgs = {
  id: Scalars['ID']['input'];
};


export type QueryInvoiceLineArgs = {
  id: Scalars['ID']['input'];
};


export type QueryInvoiceLinesArgs = {
  filter?: InputMaybe<InvoiceLinesListFilter>;
  pagination?: InputMaybe<InvoiceLinesPaginationInput>;
};


export type QueryInvoicesArgs = {
  filter?: InputMaybe<InvoicesListFilter>;
  pagination?: InputMaybe<InvoicesPaginationInput>;
};


export type QueryMediaTypeArgs = {
  id: Scalars['ID']['input'];
};


export type QueryMediaTypesArgs = {
  filter?: InputMaybe<MediaTypesListFilter>;
  pagination?: InputMaybe<MediaTypesPaginationInput>;
};


export type QueryPlaylistArgs = {
  id: Scalars['ID']['input'];
};


export type QueryPlaylistsArgs = {
  filter?: InputMaybe<PlaylistsListFilter>;
  pagination?: InputMaybe<PlaylistsPaginationInput>;
};


export type QueryTrackArgs = {
  id: Scalars['ID']['input'];
};


export type QueryTracksArgs = {
  filter?: InputMaybe<TracksListFilter>;
  pagination?: InputMaybe<TracksPaginationInput>;
};

export enum Sort {
  Asc = 'ASC',
  Desc = 'DESC'
}

export type Track = {
  __typename?: 'Track';
  album?: Maybe<Album>;
  bytes?: Maybe<Scalars['Float']['output']>;
  composer?: Maybe<Scalars['String']['output']>;
  genre?: Maybe<Genre>;
  id: Scalars['ID']['output'];
  invoiceLines: Array<InvoiceLine>;
  mediaType: MediaType;
  milliseconds: Scalars['Float']['output'];
  name: Scalars['String']['output'];
  playlists: Array<Playlist>;
  unitPrice: Scalars['String']['output'];
};

/** Data needed to create Tracks. */
export type TrackInsertInput = {
  album?: InputMaybe<AlbumInsertInput>;
  bytes?: InputMaybe<Scalars['Float']['input']>;
  composer?: InputMaybe<Scalars['String']['input']>;
  genre?: InputMaybe<GenreInsertInput>;
  invoiceLines?: InputMaybe<InvoiceLineInsertInput>;
  mediaType?: InputMaybe<MediaTypeInsertInput>;
  milliseconds?: InputMaybe<Scalars['Float']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  playlists?: InputMaybe<PlaylistInsertInput>;
  unitPrice?: InputMaybe<Scalars['String']['input']>;
};

export type TracksListFilter = {
  album?: InputMaybe<AlbumsListFilter>;
  genre?: InputMaybe<GenresListFilter>;
  id_in?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_ne?: InputMaybe<Scalars['ID']['input']>;
  id_nin?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  id_null?: InputMaybe<Scalars['Boolean']['input']>;
  invoiceLines?: InputMaybe<InvoiceLinesListFilter>;
  mediaType?: InputMaybe<MediaTypesListFilter>;
  playlists?: InputMaybe<PlaylistsListFilter>;
};

export type TracksOrderByInput = {
  bytes?: InputMaybe<Sort>;
  composer?: InputMaybe<Sort>;
  id?: InputMaybe<Sort>;
  milliseconds?: InputMaybe<Sort>;
  name?: InputMaybe<Sort>;
  unitPrice?: InputMaybe<Sort>;
};

/** Pagination options for Tracks. */
export type TracksPaginationInput = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<TracksOrderByInput>;
};
