{
  "version": 3,
  "sources": ["../src/index.ts", "../src/init/index.ts", "../src/init/template.ts", "../src/init/constants.ts", "../src/init/backend.ts", "../src/import/index.ts"],
  "sourcesContent": ["import yargs from 'yargs';\nimport chokidar from 'chokidar';\nimport {\n\tStartOptions,\n\tanalyseBundle,\n\tbuildBackend,\n\tbuildFrontend,\n\tstartBackend,\n\tstartFrontend,\n} from '@exogee/graphweaver-builder';\nimport { Backend, init } from './init';\nimport { importDataSource } from './import';\n\nyargs.version(false);\n\nyargs\n\t.env('GRAPHWEAVER')\n\t.command({\n\t\tcommand: ['init'],\n\t\tdescribe: 'Create a graphweaver project in various ways.',\n\t\tbuilder: (yargs) =>\n\t\t\tyargs\n\t\t\t\t.option('name', {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdescribe: 'The name of this project.',\n\t\t\t\t})\n\t\t\t\t.option('backend', {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdescribe: 'Specify a data source.',\n\t\t\t\t\tchoices: ['postgres', 'mysql', 'rest', 'sqlite'],\n\t\t\t\t})\n\t\t\t\t.option('version', {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdescribe: 'Specify a version of GraphWeaver to use.',\n\t\t\t\t}),\n\t\thandler: async (argv) => {\n\t\t\tconst version = argv.version;\n\t\t\tconst name = argv.name;\n\t\t\tconst backend = argv.backend;\n\t\t\tif (backend === 'postgres') init({ name, backend: Backend.MikroOrmPostgres, version });\n\t\t\tif (backend === 'mysql') init({ name, backend: Backend.MikroOrmMysql, version });\n\t\t\tif (backend === 'rest') init({ name, backend: Backend.REST, version });\n\t\t\tif (backend === 'sqlite') init({ name, backend: Backend.MikroOrmSqlite, version });\n\t\t\tinit({ name, version });\n\t\t},\n\t})\n\t.command({\n\t\tcommand: ['import [source]'],\n\t\tdescribe: 'Inspect a data source and then import its entities.',\n\t\tbuilder: (yargs) =>\n\t\t\tyargs\n\t\t\t\t.positional('source', {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tchoices: ['mysql', 'postgresql', 'sqlite'],\n\t\t\t\t\tdefault: 'postgresql',\n\t\t\t\t\tdescribe: 'The data source to import.',\n\t\t\t\t})\n\t\t\t\t.option('database', {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdescribe: 'Specify the database name.',\n\t\t\t\t}),\n\t\thandler: async ({ source, database }) => {\n\t\t\tawait importDataSource(source, database);\n\t\t},\n\t})\n\t.command({\n\t\tcommand: ['analyse [target]', 'analyze [target]', 'a [target]'],\n\t\tdescribe: 'Instruments your graphweaver project in various ways.',\n\t\tbuilder: (yargs) =>\n\t\t\tyargs.positional('target', {\n\t\t\t\ttype: 'string',\n\t\t\t\tchoices: ['bundle'],\n\t\t\t\tdefault: 'bundle',\n\t\t\t\tdescribe: 'The thing to analyse.',\n\t\t\t}),\n\t\thandler: async ({ target }) => {\n\t\t\tif (target === 'bundle') {\n\t\t\t\tawait analyseBundle();\n\t\t\t}\n\t\t},\n\t})\n\t.command({\n\t\tcommand: ['build [environment]', 'b [environment]'],\n\t\tdescribe: 'Builds your graphweaver project for deployment.',\n\t\tbuilder: (yargs) =>\n\t\t\tyargs\n\t\t\t\t.positional('environment', {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tchoices: ['backend', 'frontend', 'all'],\n\t\t\t\t\tdefault: 'all',\n\t\t\t\t\tdescribe: 'Choose whether you want to build the backend, frontend, or both.',\n\t\t\t\t})\n\t\t\t\t.option('adminUiBase', {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdefault: '/',\n\t\t\t\t\tdescribe: 'Specify the base path for the Admin UI',\n\t\t\t\t}),\n\t\thandler: async ({ environment, adminUiBase }) => {\n\t\t\tif (environment === 'backend' || environment === 'all') {\n\t\t\t\tawait buildBackend({});\n\t\t\t}\n\t\t\tif (environment === 'frontend' || environment === 'all') {\n\t\t\t\tawait buildFrontend({ adminUiBase });\n\t\t\t}\n\n\t\t\t// Note, this will leave the ESBuild service process around:\n\t\t\t// https://github.com/evanw/esbuild/issues/985\n\t\t\t// console.log('Handles: ', (process as any)._getActiveHandles());\n\t\t\t//\n\t\t\t// It does not give us a way to kill it gracefully, so we'll do it here.\n\t\t\tprocess.exit(0);\n\t\t},\n\t})\n\t.command({\n\t\tcommand: ['start [environment]', 's [environment]'],\n\t\tdescribe: 'Runs a development version of the project locally.',\n\t\tbuilder: (yargs) =>\n\t\t\tyargs\n\t\t\t\t.positional('environment', {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tchoices: ['backend', 'frontend', 'all'],\n\t\t\t\t\tdefault: 'all',\n\t\t\t\t\tdescribe: 'Choose whether you want to run the backend, frontend, or both.',\n\t\t\t\t})\n\t\t\t\t.option('host', {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdescribe: 'Specify a host to listen on e.g. --host 0.0.0.0',\n\t\t\t\t})\n\t\t\t\t.option('port', {\n\t\t\t\t\ttype: 'number',\n\t\t\t\t\tdefault: 9000,\n\t\t\t\t\tdescribe:\n\t\t\t\t\t\t'Specify a base port to listen on. Frontend will start on this port, and backend will start on port+1',\n\t\t\t\t}),\n\t\thandler: async ({ environment, ...args }) => {\n\t\t\tif (environment === 'backend' || environment === 'all') {\n\t\t\t\tawait startBackend(args as any);\n\t\t\t}\n\t\t\tif (environment === 'frontend' || environment === 'all') {\n\t\t\t\tawait startFrontend(args as StartOptions);\n\t\t\t}\n\t\t},\n\t})\n\t.command({\n\t\tcommand: ['watch [environment]', 'w [environment]'],\n\t\tdescribe: 'Runs a development version of the project locally and watches files for changes.',\n\t\tbuilder: (yargs) =>\n\t\t\tyargs\n\t\t\t\t.positional('environment', {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tchoices: ['backend', 'frontend', 'all'],\n\t\t\t\t\tdefault: 'all',\n\t\t\t\t\tdescribe: 'Choose whether you want to run the backend, frontend, or both.',\n\t\t\t\t})\n\t\t\t\t.option('host', {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdescribe: 'Specify a host to listen on e.g. --host 0.0.0.0',\n\t\t\t\t})\n\t\t\t\t.option('port', {\n\t\t\t\t\ttype: 'number',\n\t\t\t\t\tdefault: 9000,\n\t\t\t\t\tdescribe:\n\t\t\t\t\t\t'Specify a base port to listen on. Frontend will start on this port, and backend will start on port+1',\n\t\t\t\t}),\n\t\thandler: async ({ environment, ...args }) => {\n\t\t\tif (environment === 'backend' || environment === 'all') {\n\t\t\t\tawait startBackend(args as any);\n\t\t\t}\n\t\t\tif (environment === 'frontend' || environment === 'all') {\n\t\t\t\t// Logic to start the process\n\t\t\t\tconsole.log('Watch process started...');\n\t\t\t\tawait startFrontend(args as StartOptions);\n\n\t\t\t\t// Watch the directory for file changes\n\t\t\t\tconst watcher = chokidar.watch('./src/**', {\n\t\t\t\t\tignored: [/node_modules/, /__generated__/, /.*\\.generated\\.tsx$/, /.*\\.generated\\.ts$/],\n\t\t\t\t});\n\n\t\t\t\t// Restart the process on file change\n\t\t\t\twatcher.on('change', async () => {\n\t\t\t\t\tconsole.log('File changed. Restarting the process...');\n\t\t\t\t\tawait startFrontend(args as StartOptions);\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t})\n\t.showHelpOnFail(true)\n\t.help('help')\n\t.command({\n\t\tcommand: '*',\n\t\thandler() {\n\t\t\tyargs.showHelp();\n\t\t},\n\t})\n\t.parse();\n", "import { exit, cwd } from 'process';\n\nimport {\n\tmakePackageJson,\n\tmakeDirectories,\n\tmakeIndex,\n\tmakeSchemaIndex,\n\tmakeTsConfig,\n\tmakeReadme,\n\tmakeDatabase,\n} from './template';\n\nexport enum Backend {\n\tMikroOrmPostgres,\n\tMikroOrmMysql,\n\tREST,\n\tMikroOrmSqlite,\n}\n\nconst abort = () => {\n\tconsole.log('Cancelled!');\n\texit(1);\n};\n\nexport const needsDatabaseConnection = (backends: Backend[]) =>\n\tbackends.some((backend) =>\n\t\t[Backend.MikroOrmPostgres, Backend.MikroOrmMysql, Backend.MikroOrmSqlite].includes(backend)\n\t);\n\nexport const initGraphWeaver = (projectName: string, backends: Backend[], version?: string) => {\n\tmakeDirectories(projectName);\n\tmakeReadme(projectName);\n\tmakePackageJson(projectName, backends, version);\n\tmakeTsConfig(projectName);\n\tmakeIndex(projectName, backends);\n\tif (needsDatabaseConnection(backends)) makeDatabase(projectName, backends);\n\tmakeSchemaIndex(projectName, backends);\n};\n\ntype InitOptions = {\n\tversion?: string /** Optional version to use for the starter */;\n\tname?: string /** Optional name to use for the project */;\n\tbackend?: Backend /** Optional backend to use for the starter */;\n};\n\nexport const init = async ({ version, name, backend }: InitOptions) => {\n\tconsole.log(`GraphWeaver ${version ? 'using version ' + version : ''}\\n`);\n\n\tif (backend && name) {\n\t\tinitGraphWeaver(name, [backend], version);\n\t} else {\n\t\tconst { default: inquirer } = await import('inquirer');\n\n\t\tconst {\n\t\t\tprojectName,\n\t\t\tcreateDirectory = true,\n\t\t\tbackends,\n\t\t} = await inquirer.prompt([\n\t\t\t{\n\t\t\t\ttype: 'input',\n\t\t\t\tname: 'projectName',\n\t\t\t\tmessage: `What would your like to call your new project?`,\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'checkbox',\n\t\t\t\tname: 'backends',\n\t\t\t\tmessage: 'Which GraphWeaver backends will you need?',\n\t\t\t\tchoices: [\n\t\t\t\t\t{\n\t\t\t\t\t\tvalue: Backend.MikroOrmPostgres,\n\t\t\t\t\t\tname: 'MikroORM - PostgreSQL Backend',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tvalue: Backend.MikroOrmMysql,\n\t\t\t\t\t\tname: 'MikroORM - MySQL Backend',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tvalue: Backend.MikroOrmSqlite,\n\t\t\t\t\t\tname: 'MikroORM - SQLite Backend',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tvalue: Backend.REST,\n\t\t\t\t\t\tname: 'REST Backend',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'confirm',\n\t\t\t\tname: 'createDirectory',\n\t\t\t\tmessage: (answers) =>\n\t\t\t\t\t`OK, we're ready- I'm going to create a new app in \"${cwd()}/${\n\t\t\t\t\t\tanswers.projectName\n\t\t\t\t\t}\" - is that OK?`,\n\t\t\t},\n\t\t]);\n\n\t\tif (!createDirectory) abort();\n\t\tinitGraphWeaver(projectName, backends, version);\n\t}\n\n\tconsole.log('All Done!\\nMake sure you to pnpm install, then pnpm start.');\n\n\texit(0);\n};\n", "import { writeFileSync, mkdirSync } from 'fs';\nimport { packagesForBackend } from './backend';\nimport { AWS_LAMBDA_VERSION, GRAPHWEAVER_TARGET_VERSION } from './constants';\nimport { Backend, needsDatabaseConnection } from '.';\n\nexport const makePackageJson = (projectName: string, backends: Backend[], version?: string) => {\n\tconst backendPackages = Object.assign(\n\t\t{},\n\t\t...backends.map((backend) => packagesForBackend(backend, version))\n\t);\n\n\tconst graphWeaverVersion = version ?? GRAPHWEAVER_TARGET_VERSION;\n\n\tconst packageJson = {\n\t\tname: projectName,\n\t\tversion: '0.1.0',\n\t\tdescription: `${projectName} GraphWeaver Project`,\n\t\tscripts: {\n\t\t\tbuild: 'graphweaver build',\n\t\t\tstart: 'graphweaver start',\n\t\t\twatch: 'graphweaver watch',\n\t\t},\n\t\tdependencies: {\n\t\t\t'@as-integrations/aws-lambda': AWS_LAMBDA_VERSION,\n\t\t\t'@exogee/graphweaver': graphWeaverVersion,\n\t\t\t'@exogee/graphweaver-scalars': graphWeaverVersion,\n\t\t\t'@exogee/graphweaver-apollo': graphWeaverVersion,\n\t\t\tgraphweaver: graphWeaverVersion,\n\t\t\t...backendPackages,\n\t\t\t'reflect-metadata': '0.1.13',\n\t\t\t'type-graphql': '2.0.0-beta.2',\n\t\t\t'class-validator': '0.14.0',\n\t\t\tgraphql: '16.6.0',\n\t\t},\n\t\tdevDependencies: {\n\t\t\t'@types/node': '14.14.10',\n\t\t\ttypescript: '5.0.2',\n\t\t},\n\t};\n\n\twriteFileSync(`${projectName}/package.json`, JSON.stringify(packageJson, null, 4));\n};\n\nexport const makeDirectories = (projectName: string) => {\n\tmkdirSync(projectName);\n\tmkdirSync(`${projectName}/src`);\n\tmkdirSync(`${projectName}/src/backend`);\n\tmkdirSync(`${projectName}/src/backend/schema`);\n};\n\nexport const makeDatabase = (projectName: string, backends: Backend[]) => {\n\tconst myDriverImport = `import { MySqlDriver } from '@mikro-orm/mysql';`;\n\tconst myConnection = `export const myConnection = {\n\tconnectionManagerId: 'my',\n\tmikroOrmConfig: {\n\t\tdriver: MySqlDriver,\n\t\tentities: [],\n\t\tdbName: '%%REPLACE_WITH_DB_NAME%%',\n\t\tuser: '%%REPLACE_WITH_USERNAME%%',\n\t\tpassword: '%%REPLACE_WITH_PASSWORD%%',\n\t\tport: 3306,\n\t},\n};`;\n\n\tconst pgDriverImport = `import { PostgreSqlDriver } from '@mikro-orm/postgresql';`;\n\tconst pgConnection = `export const pgConnection = {\n\tconnectionManagerId: 'pg',\n\tmikroOrmConfig: {\n\t\tdriver: PostgreSqlDriver,\n\t\tentities: [],\n\t\tdbName: '%%REPLACE_WITH_DB_NAME%%',\n\t\tuser: '%%REPLACE_WITH_USERNAME%%',\n\t\tpassword: '%%REPLACE_WITH_PASSWORD%%',\n\t\tport: 5432,\n\t},\n};`;\n\n\tconst liteDriverImport = `import { SqliteDriver } from '@mikro-orm/sqlite';`;\n\tconst liteConnection = `export const liteConnection = {\n\tconnectionManagerId: 'sqlite',\n\tmikroOrmConfig: {\n\t\tdriver: SqliteDriver,\n\t\tentities: [],\n\t\tdbName: '%%REPLACE_WITH_DB_NAME%%',\n\t},\n};`;\n\n\tconst hasPostgres = backends.some((backend) => backend === Backend.MikroOrmPostgres);\n\tconst hasMySql = backends.some((backend) => backend === Backend.MikroOrmMysql);\n\tconst hasSqlite = backends.some((backend) => backend === Backend.MikroOrmSqlite);\n\n\t// Install the Apollo plugins on the server\n\tlet plugins = undefined;\n\tif (hasPostgres && hasMySql) {\n\t\tplugins = `[connectToDatabase([pgConnection, myConnection]), ClearDatabaseContext]`;\n\t} else if (hasPostgres) {\n\t\tplugins = `[connectToDatabase(pgConnection), ClearDatabaseContext]`;\n\t} else if (hasMySql) {\n\t\tplugins = `[connectToDatabase(myConnection), ClearDatabaseContext]`;\n\t} else if (hasSqlite) {\n\t\tplugins = `[connectToDatabase(liteConnection), ClearDatabaseContext]`;\n\t}\n\n\tconst database = `import { ClearDatabaseContext, connectToDatabase } from '@exogee/graphweaver-mikroorm';\n${hasPostgres ? pgDriverImport : ``}\n${hasMySql ? myDriverImport : ``}\n${hasSqlite ? liteDriverImport : ``}\n\n${hasPostgres ? pgConnection : ``}\n${hasMySql ? myConnection : ``}\n${hasSqlite ? liteConnection : ``}\n\nexport const plugins = ${plugins};\n\t`;\n\n\twriteFileSync(`${projectName}/src/backend/database.ts`, database);\n};\n\nexport const makeIndex = (projectName: string, backends: Backend[]) => {\n\tconst hasDatabaseConnections = needsDatabaseConnection(backends);\n\n\tconst index = `\\\n/* ${projectName} GraphWeaver Project */\n\nimport 'reflect-metadata';\nimport { handlers, startServerAndCreateLambdaHandler } from '@as-integrations/aws-lambda';\nimport Graphweaver from '@exogee/graphweaver-apollo';\n${hasDatabaseConnections ? `import { plugins } from './database';` : ''}\nimport { resolvers } from './schema';\n\nconst isOffline = process.env.IS_OFFLINE === 'true';\n\nconst graphweaver = new Graphweaver({\n\tresolvers,\n\tapolloServerOptions: {\n\t\tintrospection: isOffline,\n\t\t${hasDatabaseConnections ? `plugins,` : ''}\n\t},\n\tadminMetadata: { enabled: true },\n});\n\nexport const handler = startServerAndCreateLambdaHandler<any>(\n\tgraphweaver.server,\n\thandlers.createAPIGatewayProxyEventRequestHandler()\n);\n\n\n`;\n\n\twriteFileSync(`${projectName}/src/backend/index.ts`, index);\n};\n\nexport const makeSchemaIndex = (projectName: string, backends: Backend[]) => {\n\tconst index = `\\\n/* ${projectName} GraphWeaver Project - Schema */\nexport const resolvers = []; // add your resolvers here \n`;\n\n\twriteFileSync(`${projectName}/src/backend/schema/index.ts`, index);\n};\n\nexport const makeTsConfig = (projectName: string) => {\n\tconst tsConfig = {\n\t\tcompilerOptions: {\n\t\t\toutDir: './lib',\n\t\t\trootDir: './src',\n\t\t\tnoUnusedLocals: false,\n\t\t\texperimentalDecorators: true,\n\t\t\temitDecoratorMetadata: true,\n\t\t\ttarget: 'es2019',\n\t\t\tmodule: 'CommonJS',\n\t\t\tallowSyntheticDefaultImports: true,\n\t\t\tesModuleInterop: true,\n\t\t},\n\t\texclude: ['**/node_modules/**', '**/lib/**'],\n\t\tinclude: ['./src'],\n\t};\n\n\twriteFileSync(`${projectName}/tsconfig.json`, JSON.stringify(tsConfig, null, 4));\n};\n\nexport const makeReadme = (projectName: string) => {\n\tconst readme = `# ${projectName} GraphWeaver Project`;\n\twriteFileSync(`${projectName}/README.md`, readme);\n};\n", "import { version } from '../../package.json';\n\nexport const GRAPHWEAVER_TARGET_VERSION = version;\nexport const MIKRO_ORM_TARGET_VERSION = '5.4.2';\nexport const AWS_LAMBDA_VERSION = '2.0.1';\n", "import { Backend } from '.';\nimport { GRAPHWEAVER_TARGET_VERSION, MIKRO_ORM_TARGET_VERSION } from './constants';\n\nexport const packagesForBackend = (backend: Backend, version?: string): Record<string, string> => {\n\tconst graphWeaverVersion = version ?? GRAPHWEAVER_TARGET_VERSION;\n\n\tswitch (backend) {\n\t\tcase Backend.MikroOrmPostgres:\n\t\t\treturn {\n\t\t\t\t'@exogee/graphweaver-mikroorm': graphWeaverVersion,\n\t\t\t\t'@mikro-orm/core': MIKRO_ORM_TARGET_VERSION,\n\t\t\t\t'@mikro-orm/postgresql': MIKRO_ORM_TARGET_VERSION,\n\t\t\t};\n\n\t\tcase Backend.MikroOrmMysql:\n\t\t\treturn {\n\t\t\t\t'@exogee/graphweaver-mikroorm': graphWeaverVersion,\n\t\t\t\t'@mikro-orm/core': MIKRO_ORM_TARGET_VERSION,\n\t\t\t\t'@mikro-orm/mysql': MIKRO_ORM_TARGET_VERSION,\n\t\t\t};\n\n\t\tcase Backend.MikroOrmSqlite:\n\t\t\treturn {\n\t\t\t\t'@exogee/graphweaver-mikroorm': graphWeaverVersion,\n\t\t\t\t'@mikro-orm/core': MIKRO_ORM_TARGET_VERSION,\n\t\t\t\t'@mikro-orm/sqlite': MIKRO_ORM_TARGET_VERSION,\n\t\t\t};\n\n\t\tcase Backend.REST:\n\t\t\treturn {\n\t\t\t\t'@exogee/graphweaver-rest': graphWeaverVersion,\n\t\t\t};\n\t}\n};\n", "import { introspection } from '@exogee/graphweaver-mikroorm';\nimport { existsSync, mkdirSync, writeFileSync } from 'fs';\nimport ora from 'ora';\nimport path from 'path';\n\nconst createDirectories = (dirPath: string) => {\n\tconst directories = dirPath.split(path.sep);\n\tlet currentPath = '';\n\n\tfor (const directory of directories) {\n\t\tcurrentPath = path.join(currentPath, directory);\n\t\tif (!existsSync(currentPath)) {\n\t\t\tmkdirSync(currentPath);\n\t\t}\n\t}\n};\n\nexport const isIntrospectionError = (\n\terror: any\n): error is { type: string; title: string; message: string } => {\n\treturn (\n\t\ttypeof error.type === 'string' &&\n\t\ttypeof error.title === 'string' &&\n\t\terror.type === 'IntrospectionError' &&\n\t\ttypeof error.message === 'string'\n\t);\n};\n\nexport const importDataSource = async (\n\tsource: 'mysql' | 'postgresql' | 'sqlite',\n\tdatabase?: string\n) => {\n\tconst { default: inquirer } = await import('inquirer');\n\tconst { host, dbName, user, password, port } =\n\t\tsource === 'sqlite'\n\t\t\t? { host: undefined, dbName: database, user: undefined, password: undefined, port: undefined }\n\t\t\t: await inquirer.prompt([\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'input',\n\t\t\t\t\t\tname: 'host',\n\t\t\t\t\t\tdefault: '127.0.0.1',\n\t\t\t\t\t\tmessage: `What is the database server's hostname?`,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'input',\n\t\t\t\t\t\tname: 'dbName',\n\t\t\t\t\t\tmessage: `What is the database name?`,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'input',\n\t\t\t\t\t\tname: 'user',\n\t\t\t\t\t\tmessage: `What is the username to access the database server?`,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'password',\n\t\t\t\t\t\tmask: '*',\n\t\t\t\t\t\tname: 'password',\n\t\t\t\t\t\tmessage: `What is the password for this user?`,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'input',\n\t\t\t\t\t\tname: 'port',\n\t\t\t\t\t\tdefault: source === 'postgresql' ? 5432 : 3306,\n\t\t\t\t\t\tmessage: `What is the port?`,\n\t\t\t\t\t},\n\t\t\t  ]);\n\n\tconst spinner = ora('Introspecting...').start();\n\n\ttry {\n\t\tconst files = await introspection(source, {\n\t\t\tmikroOrmConfig: {\n\t\t\t\thost,\n\t\t\t\tdbName,\n\t\t\t\tuser,\n\t\t\t\tpassword,\n\t\t\t\tport,\n\t\t\t},\n\t\t});\n\n\t\tspinner.stop();\n\t\tconsole.log('Import complete.');\n\n\t\tfor (const file of files) {\n\t\t\tcreateDirectories(path.join('./src/', file.path));\n\t\t\twriteFileSync(path.join(process.cwd(), './src/', file.path, file.name), file.contents);\n\t\t}\n\t} catch (err: unknown) {\n\t\tif (isIntrospectionError(err)) {\n\t\t\tconsole.warn(`\\n\\n${err.title}\\n${err.message}\\n\\n`);\n\t\t} else {\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\t// Force exit because Mikro is keeping the socket open to the db\n\tprocess.exit();\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AAAA,mBAAkB;AAClB,sBAAqB;AACrB,iCAOO;;;ACTP,qBAA0B;;;ACA1B,gBAAyC;;;;;;ACElC,IAAM,6BAA6B;AACnC,IAAM,2BAA2B;AACjC,IAAM,qBAAqB;;;ACD3B,IAAM,qBAAqB,CAAC,SAAkBA,aAA6C;AACjG,QAAM,qBAAqBA,YAAW;AAEtC,UAAQ;AAAA;AAEN,aAAO;AAAA,QACN,gCAAgC;AAAA,QAChC,mBAAmB;AAAA,QACnB,yBAAyB;AAAA,MAC1B;AAAA;AAGA,aAAO;AAAA,QACN,gCAAgC;AAAA,QAChC,mBAAmB;AAAA,QACnB,oBAAoB;AAAA,MACrB;AAAA;AAGA,aAAO;AAAA,QACN,gCAAgC;AAAA,QAChC,mBAAmB;AAAA,QACnB,qBAAqB;AAAA,MACtB;AAAA;AAGA,aAAO;AAAA,QACN,4BAA4B;AAAA,MAC7B;AAAA;AAEH;;;AF5BO,IAAM,kBAAkB,CAAC,aAAqB,UAAqBC,aAAqB;AAC9F,QAAM,kBAAkB,OAAO;AAAA,IAC9B,CAAC;AAAA,IACD,GAAG,SAAS,IAAI,CAAC,YAAY,mBAAmB,SAASA,QAAO,CAAC;AAAA,EAClE;AAEA,QAAM,qBAAqBA,YAAW;AAEtC,QAAM,cAAc;AAAA,IACnB,MAAM;AAAA,IACN,SAAS;AAAA,IACT,aAAa,GAAG;AAAA,IAChB,SAAS;AAAA,MACR,OAAO;AAAA,MACP,OAAO;AAAA,MACP,OAAO;AAAA,IACR;AAAA,IACA,cAAc;AAAA,MACb,+BAA+B;AAAA,MAC/B,uBAAuB;AAAA,MACvB,+BAA+B;AAAA,MAC/B,8BAA8B;AAAA,MAC9B,aAAa;AAAA,MACb,GAAG;AAAA,MACH,oBAAoB;AAAA,MACpB,gBAAgB;AAAA,MAChB,mBAAmB;AAAA,MACnB,SAAS;AAAA,IACV;AAAA,IACA,iBAAiB;AAAA,MAChB,eAAe;AAAA,MACf,YAAY;AAAA,IACb;AAAA,EACD;AAEA,+BAAc,GAAG,4BAA4B,KAAK,UAAU,aAAa,MAAM,CAAC,CAAC;AAClF;AAEO,IAAM,kBAAkB,CAAC,gBAAwB;AACvD,2BAAU,WAAW;AACrB,2BAAU,GAAG,iBAAiB;AAC9B,2BAAU,GAAG,yBAAyB;AACtC,2BAAU,GAAG,gCAAgC;AAC9C;AAEO,IAAM,eAAe,CAAC,aAAqB,aAAwB;AACzE,QAAM,iBAAiB;AACvB,QAAM,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYrB,QAAM,iBAAiB;AACvB,QAAM,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYrB,QAAM,mBAAmB;AACzB,QAAM,iBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASvB,QAAM,cAAc,SAAS,KAAK,CAAC,YAAY,oCAAoC;AACnF,QAAM,WAAW,SAAS,KAAK,CAAC,YAAY,iCAAiC;AAC7E,QAAM,YAAY,SAAS,KAAK,CAAC,YAAY,kCAAkC;AAG/E,MAAI,UAAU;AACd,MAAI,eAAe,UAAU;AAC5B,cAAU;AAAA,EACX,WAAW,aAAa;AACvB,cAAU;AAAA,EACX,WAAW,UAAU;AACpB,cAAU;AAAA,EACX,WAAW,WAAW;AACrB,cAAU;AAAA,EACX;AAEA,QAAM,WAAW;AAAA,EAChB,cAAc,iBAAiB;AAAA,EAC/B,WAAW,iBAAiB;AAAA,EAC5B,YAAY,mBAAmB;AAAA;AAAA,EAE/B,cAAc,eAAe;AAAA,EAC7B,WAAW,eAAe;AAAA,EAC1B,YAAY,iBAAiB;AAAA;AAAA,yBAEN;AAAA;AAGxB,+BAAc,GAAG,uCAAuC,QAAQ;AACjE;AAEO,IAAM,YAAY,CAAC,aAAqB,aAAwB;AACtE,QAAM,yBAAyB,wBAAwB,QAAQ;AAE/D,QAAM,QAAQ,MACV;AAAA;AAAA;AAAA;AAAA;AAAA,EAKH,yBAAyB,0CAA0C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASjE,yBAAyB,aAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAazC,+BAAc,GAAG,oCAAoC,KAAK;AAC3D;AAEO,IAAM,kBAAkB,CAAC,aAAqB,aAAwB;AAC5E,QAAM,QAAQ,MACV;AAAA;AAAA;AAIJ,+BAAc,GAAG,2CAA2C,KAAK;AAClE;AAEO,IAAM,eAAe,CAAC,gBAAwB;AACpD,QAAM,WAAW;AAAA,IAChB,iBAAiB;AAAA,MAChB,QAAQ;AAAA,MACR,SAAS;AAAA,MACT,gBAAgB;AAAA,MAChB,wBAAwB;AAAA,MACxB,uBAAuB;AAAA,MACvB,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,8BAA8B;AAAA,MAC9B,iBAAiB;AAAA,IAClB;AAAA,IACA,SAAS,CAAC,sBAAsB,WAAW;AAAA,IAC3C,SAAS,CAAC,OAAO;AAAA,EAClB;AAEA,+BAAc,GAAG,6BAA6B,KAAK,UAAU,UAAU,MAAM,CAAC,CAAC;AAChF;AAEO,IAAM,aAAa,CAAC,gBAAwB;AAClD,QAAM,SAAS,KAAK;AACpB,+BAAc,GAAG,yBAAyB,MAAM;AACjD;;;ADrKA,IAAM,QAAQ,MAAM;AACnB,UAAQ,IAAI,YAAY;AACxB,2BAAK,CAAC;AACP;AAEO,IAAM,0BAA0B,CAAC,aACvC,SAAS;AAAA,EAAK,CAAC,YACd,CAAC,0BAA0B,uBAAuB,sBAAsB,EAAE,SAAS,OAAO;AAC3F;AAEM,IAAM,kBAAkB,CAAC,aAAqB,UAAqBC,aAAqB;AAC9F,kBAAgB,WAAW;AAC3B,aAAW,WAAW;AACtB,kBAAgB,aAAa,UAAUA,QAAO;AAC9C,eAAa,WAAW;AACxB,YAAU,aAAa,QAAQ;AAC/B,MAAI,wBAAwB,QAAQ;AAAG,iBAAa,aAAa,QAAQ;AACzE,kBAAgB,aAAa,QAAQ;AACtC;AAQO,IAAM,OAAO,OAAO,EAAE,SAAAA,UAAS,MAAM,QAAQ,MAAmB;AACtE,UAAQ,IAAI,eAAeA,WAAU,mBAAmBA,WAAU;AAAA,CAAM;AAExE,MAAI,WAAW,MAAM;AACpB,oBAAgB,MAAM,CAAC,OAAO,GAAGA,QAAO;AAAA,EACzC,OAAO;AACN,UAAM,EAAE,SAAS,SAAS,IAAI,MAAM,OAAO;AAE3C,UAAM;AAAA,MACL;AAAA,MACA,kBAAkB;AAAA,MAClB;AAAA,IACD,IAAI,MAAM,SAAS,OAAO;AAAA,MACzB;AAAA,QACC,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,MACV;AAAA,MACA;AAAA,QACC,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,SAAS;AAAA,UACR;AAAA,YACC,OAAO;AAAA,YACP,MAAM;AAAA,UACP;AAAA,UACA;AAAA,YACC,OAAO;AAAA,YACP,MAAM;AAAA,UACP;AAAA,UACA;AAAA,YACC,OAAO;AAAA,YACP,MAAM;AAAA,UACP;AAAA,UACA;AAAA,YACC,OAAO;AAAA,YACP,MAAM;AAAA,UACP;AAAA,QACD;AAAA,MACD;AAAA,MACA;AAAA,QACC,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS,CAAC,YACT,0DAAsD,oBAAI,KACzD,QAAQ;AAAA,MAEX;AAAA,IACD,CAAC;AAED,QAAI,CAAC;AAAiB,YAAM;AAC5B,oBAAgB,aAAa,UAAUA,QAAO;AAAA,EAC/C;AAEA,UAAQ,IAAI,4DAA4D;AAExE,2BAAK,CAAC;AACP;;;AIvGA,kCAA8B;AAC9B,IAAAC,aAAqD;AACrD,iBAAgB;AAChB,kBAAiB;AAEjB,IAAM,oBAAoB,CAAC,YAAoB;AAC9C,QAAM,cAAc,QAAQ,MAAM,YAAAC,QAAK,GAAG;AAC1C,MAAI,cAAc;AAElB,aAAW,aAAa,aAAa;AACpC,kBAAc,YAAAA,QAAK,KAAK,aAAa,SAAS;AAC9C,QAAI,KAAC,uBAAW,WAAW,GAAG;AAC7B,gCAAU,WAAW;AAAA,IACtB;AAAA,EACD;AACD;AAEO,IAAM,uBAAuB,CACnC,UAC+D;AAC/D,SACC,OAAO,MAAM,SAAS,YACtB,OAAO,MAAM,UAAU,YACvB,MAAM,SAAS,wBACf,OAAO,MAAM,YAAY;AAE3B;AAEO,IAAM,mBAAmB,OAC/B,QACA,aACI;AACJ,QAAM,EAAE,SAAS,SAAS,IAAI,MAAM,OAAO;AAC3C,QAAM,EAAE,MAAM,QAAQ,MAAM,UAAU,KAAK,IAC1C,WAAW,WACR,EAAE,MAAM,QAAW,QAAQ,UAAU,MAAM,QAAW,UAAU,QAAW,MAAM,OAAU,IAC3F,MAAM,SAAS,OAAO;AAAA,IACtB;AAAA,MACC,MAAM;AAAA,MACN,MAAM;AAAA,MACN,SAAS;AAAA,MACT,SAAS;AAAA,IACV;AAAA,IACA;AAAA,MACC,MAAM;AAAA,MACN,MAAM;AAAA,MACN,SAAS;AAAA,IACV;AAAA,IACA;AAAA,MACC,MAAM;AAAA,MACN,MAAM;AAAA,MACN,SAAS;AAAA,IACV;AAAA,IACA;AAAA,MACC,MAAM;AAAA,MACN,MAAM;AAAA,MACN,MAAM;AAAA,MACN,SAAS;AAAA,IACV;AAAA,IACA;AAAA,MACC,MAAM;AAAA,MACN,MAAM;AAAA,MACN,SAAS,WAAW,eAAe,OAAO;AAAA,MAC1C,SAAS;AAAA,IACV;AAAA,EACA,CAAC;AAEL,QAAM,cAAU,WAAAC,SAAI,kBAAkB,EAAE,MAAM;AAE9C,MAAI;AACH,UAAM,QAAQ,UAAM,2CAAc,QAAQ;AAAA,MACzC,gBAAgB;AAAA,QACf;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACD;AAAA,IACD,CAAC;AAED,YAAQ,KAAK;AACb,YAAQ,IAAI,kBAAkB;AAE9B,eAAW,QAAQ,OAAO;AACzB,wBAAkB,YAAAD,QAAK,KAAK,UAAU,KAAK,IAAI,CAAC;AAChD,oCAAc,YAAAA,QAAK,KAAK,QAAQ,IAAI,GAAG,UAAU,KAAK,MAAM,KAAK,IAAI,GAAG,KAAK,QAAQ;AAAA,IACtF;AAAA,EACD,SAAS,KAAP;AACD,QAAI,qBAAqB,GAAG,GAAG;AAC9B,cAAQ,KAAK;AAAA;AAAA,EAAO,IAAI;AAAA,EAAU,IAAI;AAAA;AAAA,CAAa;AAAA,IACpD,OAAO;AACN,YAAM;AAAA,IACP;AAAA,EACD;AAGA,UAAQ,KAAK;AACd;;;ALpFA,aAAAE,QAAM,QAAQ,KAAK;AAEnB,aAAAA,QACE,IAAI,aAAa,EACjB,QAAQ;AAAA,EACR,SAAS,CAAC,MAAM;AAAA,EAChB,UAAU;AAAA,EACV,SAAS,CAACA,WACTA,OACE,OAAO,QAAQ;AAAA,IACf,MAAM;AAAA,IACN,UAAU;AAAA,EACX,CAAC,EACA,OAAO,WAAW;AAAA,IAClB,MAAM;AAAA,IACN,UAAU;AAAA,IACV,SAAS,CAAC,YAAY,SAAS,QAAQ,QAAQ;AAAA,EAChD,CAAC,EACA,OAAO,WAAW;AAAA,IAClB,MAAM;AAAA,IACN,UAAU;AAAA,EACX,CAAC;AAAA,EACH,SAAS,OAAO,SAAS;AACxB,UAAMC,WAAU,KAAK;AACrB,UAAM,OAAO,KAAK;AAClB,UAAM,UAAU,KAAK;AACrB,QAAI,YAAY;AAAY,WAAK,EAAE,MAAM,mCAAmC,SAAAA,SAAQ,CAAC;AACrF,QAAI,YAAY;AAAS,WAAK,EAAE,MAAM,gCAAgC,SAAAA,SAAQ,CAAC;AAC/E,QAAI,YAAY;AAAQ,WAAK,EAAE,MAAM,uBAAuB,SAAAA,SAAQ,CAAC;AACrE,QAAI,YAAY;AAAU,WAAK,EAAE,MAAM,iCAAiC,SAAAA,SAAQ,CAAC;AACjF,SAAK,EAAE,MAAM,SAAAA,SAAQ,CAAC;AAAA,EACvB;AACD,CAAC,EACA,QAAQ;AAAA,EACR,SAAS,CAAC,iBAAiB;AAAA,EAC3B,UAAU;AAAA,EACV,SAAS,CAACD,WACTA,OACE,WAAW,UAAU;AAAA,IACrB,MAAM;AAAA,IACN,SAAS,CAAC,SAAS,cAAc,QAAQ;AAAA,IACzC,SAAS;AAAA,IACT,UAAU;AAAA,EACX,CAAC,EACA,OAAO,YAAY;AAAA,IACnB,MAAM;AAAA,IACN,UAAU;AAAA,EACX,CAAC;AAAA,EACH,SAAS,OAAO,EAAE,QAAQ,SAAS,MAAM;AACxC,UAAM,iBAAiB,QAAQ,QAAQ;AAAA,EACxC;AACD,CAAC,EACA,QAAQ;AAAA,EACR,SAAS,CAAC,oBAAoB,oBAAoB,YAAY;AAAA,EAC9D,UAAU;AAAA,EACV,SAAS,CAACA,WACTA,OAAM,WAAW,UAAU;AAAA,IAC1B,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ;AAAA,IAClB,SAAS;AAAA,IACT,UAAU;AAAA,EACX,CAAC;AAAA,EACF,SAAS,OAAO,EAAE,OAAO,MAAM;AAC9B,QAAI,WAAW,UAAU;AACxB,gBAAM,0CAAc;AAAA,IACrB;AAAA,EACD;AACD,CAAC,EACA,QAAQ;AAAA,EACR,SAAS,CAAC,uBAAuB,iBAAiB;AAAA,EAClD,UAAU;AAAA,EACV,SAAS,CAACA,WACTA,OACE,WAAW,eAAe;AAAA,IAC1B,MAAM;AAAA,IACN,SAAS,CAAC,WAAW,YAAY,KAAK;AAAA,IACtC,SAAS;AAAA,IACT,UAAU;AAAA,EACX,CAAC,EACA,OAAO,eAAe;AAAA,IACtB,MAAM;AAAA,IACN,SAAS;AAAA,IACT,UAAU;AAAA,EACX,CAAC;AAAA,EACH,SAAS,OAAO,EAAE,aAAa,YAAY,MAAM;AAChD,QAAI,gBAAgB,aAAa,gBAAgB,OAAO;AACvD,gBAAM,yCAAa,CAAC,CAAC;AAAA,IACtB;AACA,QAAI,gBAAgB,cAAc,gBAAgB,OAAO;AACxD,gBAAM,0CAAc,EAAE,YAAY,CAAC;AAAA,IACpC;AAOA,YAAQ,KAAK,CAAC;AAAA,EACf;AACD,CAAC,EACA,QAAQ;AAAA,EACR,SAAS,CAAC,uBAAuB,iBAAiB;AAAA,EAClD,UAAU;AAAA,EACV,SAAS,CAACA,WACTA,OACE,WAAW,eAAe;AAAA,IAC1B,MAAM;AAAA,IACN,SAAS,CAAC,WAAW,YAAY,KAAK;AAAA,IACtC,SAAS;AAAA,IACT,UAAU;AAAA,EACX,CAAC,EACA,OAAO,QAAQ;AAAA,IACf,MAAM;AAAA,IACN,UAAU;AAAA,EACX,CAAC,EACA,OAAO,QAAQ;AAAA,IACf,MAAM;AAAA,IACN,SAAS;AAAA,IACT,UACC;AAAA,EACF,CAAC;AAAA,EACH,SAAS,OAAO,EAAE,gBAAgB,KAAK,MAAM;AAC5C,QAAI,gBAAgB,aAAa,gBAAgB,OAAO;AACvD,gBAAM,yCAAa,IAAW;AAAA,IAC/B;AACA,QAAI,gBAAgB,cAAc,gBAAgB,OAAO;AACxD,gBAAM,0CAAc,IAAoB;AAAA,IACzC;AAAA,EACD;AACD,CAAC,EACA,QAAQ;AAAA,EACR,SAAS,CAAC,uBAAuB,iBAAiB;AAAA,EAClD,UAAU;AAAA,EACV,SAAS,CAACA,WACTA,OACE,WAAW,eAAe;AAAA,IAC1B,MAAM;AAAA,IACN,SAAS,CAAC,WAAW,YAAY,KAAK;AAAA,IACtC,SAAS;AAAA,IACT,UAAU;AAAA,EACX,CAAC,EACA,OAAO,QAAQ;AAAA,IACf,MAAM;AAAA,IACN,UAAU;AAAA,EACX,CAAC,EACA,OAAO,QAAQ;AAAA,IACf,MAAM;AAAA,IACN,SAAS;AAAA,IACT,UACC;AAAA,EACF,CAAC;AAAA,EACH,SAAS,OAAO,EAAE,gBAAgB,KAAK,MAAM;AAC5C,QAAI,gBAAgB,aAAa,gBAAgB,OAAO;AACvD,gBAAM,yCAAa,IAAW;AAAA,IAC/B;AACA,QAAI,gBAAgB,cAAc,gBAAgB,OAAO;AAExD,cAAQ,IAAI,0BAA0B;AACtC,gBAAM,0CAAc,IAAoB;AAGxC,YAAM,UAAU,gBAAAE,QAAS,MAAM,YAAY;AAAA,QAC1C,SAAS,CAAC,gBAAgB,iBAAiB,uBAAuB,oBAAoB;AAAA,MACvF,CAAC;AAGD,cAAQ,GAAG,UAAU,YAAY;AAChC,gBAAQ,IAAI,yCAAyC;AACrD,kBAAM,0CAAc,IAAoB;AAAA,MACzC,CAAC;AAAA,IACF;AAAA,EACD;AACD,CAAC,EACA,eAAe,IAAI,EACnB,KAAK,MAAM,EACX,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,UAAU;AACT,iBAAAF,QAAM,SAAS;AAAA,EAChB;AACD,CAAC,EACA,MAAM;",
  "names": ["version", "version", "version", "import_fs", "path", "ora", "yargs", "version", "chokidar"]
}
