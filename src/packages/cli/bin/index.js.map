{
  "version": 3,
  "sources": ["../src/index.ts", "../src/init/index.ts", "../src/init/template.ts", "../src/init/constants.ts", "../src/init/backend.ts", "../src/init/templates/download.ts"],
  "sourcesContent": ["import yargs from 'yargs';\nimport chokidar from 'chokidar';\nimport {\n\tStartOptions,\n\tanalyseBundle,\n\tbuildBackend,\n\tbuildFrontend,\n\tstartBackend,\n\tstartFrontend,\n} from '@exogee/graphweaver-builder';\nimport { init } from './init';\n\nexport { initGraphWeaver } from './init';\n\nyargs\n\t.env('GRAPHWEAVER')\n\t.command({\n\t\tcommand: ['init'],\n\t\tdescribe: 'Create a graphweaver project in various ways.',\n\t\tbuilder: (yargs) =>\n\t\t\tyargs.option('template', {\n\t\t\t\ttype: 'string',\n\t\t\t\tdescribe: 'Specify a template to base your server on e.g. --template rest',\n\t\t\t}),\n\t\thandler: async (argv) => {\n\t\t\tconst template = argv.template;\n\t\t\tinit({ template });\n\t\t},\n\t})\n\t.command({\n\t\tcommand: ['analyse [target]', 'analyze [target]', 'a [target]'],\n\t\tdescribe: 'Instruments your graphweaver project in various ways.',\n\t\tbuilder: (yargs) =>\n\t\t\tyargs.positional('target', {\n\t\t\t\ttype: 'string',\n\t\t\t\tchoices: ['bundle'],\n\t\t\t\tdefault: 'bundle',\n\t\t\t\tdescribe: 'The thing to analyse.',\n\t\t\t}),\n\t\thandler: async ({ target }) => {\n\t\t\tif (target === 'bundle') {\n\t\t\t\tawait analyseBundle();\n\t\t\t}\n\t\t},\n\t})\n\t.command({\n\t\tcommand: ['build [environment]', 'b [environment]'],\n\t\tdescribe: 'Builds your graphweaver project for deployment.',\n\t\tbuilder: (yargs) =>\n\t\t\tyargs\n\t\t\t\t.positional('environment', {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tchoices: ['backend', 'frontend', 'all'],\n\t\t\t\t\tdefault: 'all',\n\t\t\t\t\tdescribe: 'Choose whether you want to build the backend, frontend, or both.',\n\t\t\t\t})\n\t\t\t\t.option('adminUiBase', {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdefault: '/',\n\t\t\t\t\tdescribe: 'Specify the base path for the Admin UI',\n\t\t\t\t}),\n\t\thandler: async ({ environment, adminUiBase }) => {\n\t\t\tif (environment === 'backend' || environment === 'all') {\n\t\t\t\tawait buildBackend({});\n\t\t\t}\n\t\t\tif (environment === 'frontend' || environment === 'all') {\n\t\t\t\tawait buildFrontend({ adminUiBase });\n\t\t\t}\n\n\t\t\t// Note, this will leave the ESBuild service process around:\n\t\t\t// https://github.com/evanw/esbuild/issues/985\n\t\t\t// console.log('Handles: ', (process as any)._getActiveHandles());\n\t\t\t//\n\t\t\t// It does not give us a way to kill it gracefully, so we'll do it here.\n\t\t\tprocess.exit(0);\n\t\t},\n\t})\n\t.command({\n\t\tcommand: ['start [environment]', 's [environment]'],\n\t\tdescribe: 'Runs a development version of the project locally.',\n\t\tbuilder: (yargs) =>\n\t\t\tyargs\n\t\t\t\t.positional('environment', {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tchoices: ['backend', 'frontend', 'all'],\n\t\t\t\t\tdefault: 'all',\n\t\t\t\t\tdescribe: 'Choose whether you want to run the backend, frontend, or both.',\n\t\t\t\t})\n\t\t\t\t.option('host', {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdescribe: 'Specify a host to listen on e.g. --host 0.0.0.0',\n\t\t\t\t})\n\t\t\t\t.option('port', {\n\t\t\t\t\ttype: 'number',\n\t\t\t\t\tdefault: 9000,\n\t\t\t\t\tdescribe:\n\t\t\t\t\t\t'Specify a base port to listen on. Frontend will start on this port, and backend will start on port+1',\n\t\t\t\t}),\n\t\thandler: async ({ environment, ...args }) => {\n\t\t\tif (environment === 'backend' || environment === 'all') {\n\t\t\t\tawait startBackend(args as any);\n\t\t\t}\n\t\t\tif (environment === 'frontend' || environment === 'all') {\n\t\t\t\tawait startFrontend(args as StartOptions);\n\t\t\t}\n\t\t},\n\t})\n\t.command({\n\t\tcommand: ['watch [environment]', 'w [environment]'],\n\t\tdescribe: 'Runs a development version of the project locally and watches files for changes.',\n\t\tbuilder: (yargs) =>\n\t\t\tyargs\n\t\t\t\t.positional('environment', {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tchoices: ['backend', 'frontend', 'all'],\n\t\t\t\t\tdefault: 'all',\n\t\t\t\t\tdescribe: 'Choose whether you want to run the backend, frontend, or both.',\n\t\t\t\t})\n\t\t\t\t.option('host', {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdescribe: 'Specify a host to listen on e.g. --host 0.0.0.0',\n\t\t\t\t})\n\t\t\t\t.option('port', {\n\t\t\t\t\ttype: 'number',\n\t\t\t\t\tdefault: 9000,\n\t\t\t\t\tdescribe:\n\t\t\t\t\t\t'Specify a base port to listen on. Frontend will start on this port, and backend will start on port+1',\n\t\t\t\t}),\n\t\thandler: async ({ environment, ...args }) => {\n\t\t\tif (environment === 'backend' || environment === 'all') {\n\t\t\t\tawait startBackend(args as any);\n\t\t\t}\n\t\t\tif (environment === 'frontend' || environment === 'all') {\n\t\t\t\t// Logic to start the process\n\t\t\t\tconsole.log('Watch process started...');\n\t\t\t\tawait startFrontend(args as StartOptions);\n\n\t\t\t\t// Watch the directory for file changes\n\t\t\t\tconst watcher = chokidar.watch('./src/**', {\n\t\t\t\t\tignored: [/node_modules/, /__generated__/, /.*\\.generated\\.tsx$/],\n\t\t\t\t});\n\n\t\t\t\t// Restart the process on file change\n\t\t\t\twatcher.on('change', async () => {\n\t\t\t\t\tconsole.log('File changed. Restarting the process...');\n\t\t\t\t\tawait startFrontend(args as StartOptions);\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t})\n\t.parse();\n", "import { exit, cwd } from 'process';\n\nimport {\n\tmakePackageJson,\n\tmakeDirectories,\n\tmakeIndex,\n\tmakeSchemaIndex,\n\tmakeTsConfig,\n\tmakeReadme,\n\tmakeDatabase,\n} from './template';\n\nimport { Backend } from './backend';\nimport { Downloader } from './templates/download';\n\nconst abort = () => {\n\tconsole.log('Cancelled!');\n\texit(1);\n};\n\nexport const needsDatabaseConnection = (backends: Backend[]) =>\n\tbackends.some((backend) => [Backend.MikroOrmPostgres, Backend.MikroOrmMysql].includes(backend));\n\nexport const initGraphWeaver = (projectName: string, backends: Backend[]) => {\n\tmakeDirectories(projectName);\n\tmakeReadme(projectName);\n\tmakePackageJson(projectName, backends);\n\tmakeTsConfig(projectName);\n\tmakeIndex(projectName, backends);\n\tif (needsDatabaseConnection(backends)) makeDatabase(projectName, backends);\n\tmakeSchemaIndex(projectName, backends);\n};\n\ntype InitOptions = {\n\ttemplate?: string /** Optional template to use for the starter */;\n};\n\nexport const init = async ({ template }: InitOptions) => {\n\tconsole.log(`GraphWeaver ${template ? 'using template ' + template : ''}\\n`);\n\n\timport('inquirer').then(async ({ default: inquirer }) => {\n\t\tconst { projectName, createDirectory, backends } = await inquirer.prompt([\n\t\t\t{\n\t\t\t\ttype: 'input',\n\t\t\t\tname: 'projectName',\n\t\t\t\tmessage: `What would your like to call your new project?`,\n\t\t\t},\n\t\t\t...(template\n\t\t\t\t? []\n\t\t\t\t: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'checkbox',\n\t\t\t\t\t\t\tname: 'backends',\n\t\t\t\t\t\t\tmessage: 'Which GraphWeaver backends will you need?',\n\t\t\t\t\t\t\tchoices: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tvalue: Backend.MikroOrmPostgres,\n\t\t\t\t\t\t\t\t\tname: 'MikroORM - PostgreSQL Backend',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tvalue: Backend.MikroOrmMysql,\n\t\t\t\t\t\t\t\t\tname: 'MikroORM - MySQL Backend',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tvalue: Backend.REST,\n\t\t\t\t\t\t\t\t\tname: 'REST Backend',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t  ]),\n\t\t\t{\n\t\t\t\ttype: 'confirm',\n\t\t\t\tname: 'createDirectory',\n\t\t\t\tmessage: (answers) =>\n\t\t\t\t\t`OK, we're ready- I'm going to create a new app in \"${cwd()}/${\n\t\t\t\t\t\tanswers.projectName\n\t\t\t\t\t}\" - is that OK?`,\n\t\t\t},\n\t\t]);\n\n\t\tif (!createDirectory) abort();\n\n\t\tif (template) {\n\t\t\tconst downloadManager = new Downloader();\n\t\t\tawait downloadManager.download(projectName, template);\n\t\t} else {\n\t\t\tinitGraphWeaver(projectName, backends);\n\t\t}\n\n\t\tconsole.log('All Done!\\nMake sure you to pnpm install, then pnpm start.');\n\n\t\texit(0);\n\t});\n};\n", "import { writeFileSync, mkdirSync } from 'fs';\nimport { Backend, packagesForBackend } from './backend';\nimport { AWS_LAMBDA_VERSION, GRAPHWEAVER_TARGET_VERSION } from './constants';\nimport { needsDatabaseConnection } from '.';\n\nexport const makePackageJson = (projectName: string, backends: Backend[]) => {\n\tconst backendPackages = Object.assign(\n\t\t{},\n\t\t...backends.map((backend) => packagesForBackend(backend))\n\t);\n\n\tconst packageJson = {\n\t\tname: projectName,\n\t\tversion: '0.1.0',\n\t\tdescription: `${projectName} GraphWeaver Project`,\n\t\tscripts: {\n\t\t\tbuild: 'graphweaver build',\n\t\t\tstart: 'graphweaver start',\n\t\t\twatch: 'graphweaver watch',\n\t\t},\n\t\tdependencies: {\n\t\t\t'@as-integrations/aws-lambda': AWS_LAMBDA_VERSION,\n\t\t\t'@exogee/graphweaver': GRAPHWEAVER_TARGET_VERSION,\n\t\t\t'@exogee/graphweaver-apollo': GRAPHWEAVER_TARGET_VERSION,\n\t\t\tgraphweaver: GRAPHWEAVER_TARGET_VERSION,\n\t\t\t...backendPackages,\n\t\t\t'reflect-metadata': '0.1.13',\n\t\t\t'type-graphql': '2.0.0-beta.2',\n\t\t\t'class-validator': '0.14.0',\n\t\t\tgraphql: '16.6.0',\n\t\t},\n\t\tdevDependencies: {\n\t\t\t'@types/node': '14.14.10',\n\t\t\ttypescript: '5.0.2',\n\t\t},\n\t};\n\n\twriteFileSync(`${projectName}/package.json`, JSON.stringify(packageJson, null, 4));\n};\n\nexport const makeDirectories = (projectName: string) => {\n\tmkdirSync(projectName);\n\tmkdirSync(`${projectName}/src`);\n\tmkdirSync(`${projectName}/src/backend`);\n\tmkdirSync(`${projectName}/src/backend/schema`);\n\tmkdirSync(`${projectName}/src/backend/schema/ping`);\n};\n\nexport const makeDatabase = (projectName: string, backends: Backend[]) => {\n\tconst myDriverImport = `import { MySqlDriver } from '@mikro-orm/mysql';`;\n\tconst myConnection = `export const myConnection = {\n\tconnectionManagerId: 'my',\n\tmikroOrmConfig: {\n\t\tdriver: MySqlDriver,\n\t\tentities: [],\n\t\tdbName: '%%REPLACE_WITH_DB_NAME%%',\n\t\tuser: '%%REPLACE_WITH_USERNAME%%',\n\t\tpassword: '%%REPLACE_WITH_PASSWORD%%',\n\t\tport: 3306,\n\t},\n};`;\n\n\tconst pgDriverImport = `import { PostgreSqlDriver } from '@mikro-orm/postgresql';`;\n\tconst pgConnection = `export const pgConnection = {\n\tconnectionManagerId: 'pg',\n\tmikroOrmConfig: {\n\t\tdriver: PostgreSqlDriver,\n\t\tentities: [],\n\t\tdbName: '%%REPLACE_WITH_DB_NAME%%',\n\t\tuser: '%%REPLACE_WITH_USERNAME%%',\n\t\tpassword: '%%REPLACE_WITH_PASSWORD%%',\n\t\tport: 5432,\n\t},\n};`;\n\n\tconst hasPostgres = backends.some((backend) => backend === Backend.MikroOrmPostgres);\n\tconst hasMySql = backends.some((backend) => backend === Backend.MikroOrmMysql);\n\n\t// Install the Apollo plugins on the server\n\tlet plugins = undefined;\n\tif (hasPostgres && hasMySql) {\n\t\tplugins = `[connectToDatabase([pgConnection, myConnection]), ClearDatabaseContext]`;\n\t} else if (hasPostgres) {\n\t\tplugins = `[connectToDatabase(pgConnection), ClearDatabaseContext]`;\n\t} else if (hasMySql) {\n\t\tplugins = `[connectToDatabase(myConnection), ClearDatabaseContext]`;\n\t}\n\n\tconst database = `import { ClearDatabaseContext, connectToDatabase } from '@exogee/graphweaver-mikroorm';\n${hasPostgres ? pgDriverImport : ``}\n${hasMySql ? myDriverImport : ``}\n\n${hasPostgres ? pgConnection : ``}\n${hasMySql ? myConnection : ``}\n\nexport const plugins = ${plugins};\n\t`;\n\n\twriteFileSync(`${projectName}/src/backend/database.ts`, database);\n};\n\nexport const makeIndex = (projectName: string, backends: Backend[]) => {\n\tconst hasDatabaseConnections = needsDatabaseConnection(backends);\n\n\tconst index = `\\\n/* ${projectName} GraphWeaver Project */\n\nimport 'reflect-metadata';\nimport { handlers, startServerAndCreateLambdaHandler } from '@as-integrations/aws-lambda';\nimport Graphweaver from '@exogee/graphweaver-apollo';\n${hasDatabaseConnections ? `import { plugins } from './database';` : ''}\n\nimport { PingResolver } from './schema/ping';\n\nconst isOffline = process.env.IS_OFFLINE === 'true';\n\nconst graphweaver = new Graphweaver({\n\tresolvers: [PingResolver],\n\tapolloServerOptions: {\n\t\tintrospection: isOffline,\n\t\t${hasDatabaseConnections ? `plugins,` : ''}\n\t},\n\tadminMetadata: { enabled: true },\n});\n\nexport const handler = startServerAndCreateLambdaHandler<any>(\n\tgraphweaver.server,\n\thandlers.createAPIGatewayProxyEventRequestHandler()\n);\n\n\n`;\n\n\twriteFileSync(`${projectName}/src/backend/index.ts`, index);\n};\n\nexport const makeSchemaIndex = (projectName: string, backends: Backend[]) => {\n\tconst index = `\\\n/* ${projectName} GraphWeaver Project - Schema */\nimport { buildSchemaSync, Resolver, Query } from 'type-graphql';\n\n@Resolver()\nexport class PingResolver {\n\t@Query(() => Boolean)\n\tasync ping() {\n    \t\treturn true; \n  \t}\n}   \n`;\n\n\twriteFileSync(`${projectName}/src/backend/schema/ping/index.ts`, index);\n};\n\nexport const makeTsConfig = (projectName: string) => {\n\tconst tsConfig = {\n\t\tcompilerOptions: {\n\t\t\toutDir: './lib',\n\t\t\trootDir: './src',\n\t\t\tnoUnusedLocals: false,\n\t\t\texperimentalDecorators: true,\n\t\t\temitDecoratorMetadata: true,\n\t\t\ttarget: 'es2019',\n\t\t\tmodule: 'CommonJS',\n\t\t\tallowSyntheticDefaultImports: true,\n\t\t\tesModuleInterop: true,\n\t\t},\n\t\texclude: ['**/node_modules/**', '**/lib/**'],\n\t\tinclude: ['./src'],\n\t};\n\n\twriteFileSync(`${projectName}/tsconfig.json`, JSON.stringify(tsConfig, null, 4));\n};\n\nexport const makeReadme = (projectName: string) => {\n\tconst readme = `# ${projectName} GraphWeaver Project`;\n\twriteFileSync(`${projectName}/README.md`, readme);\n};\n", "import { version } from '../../package.json';\n\nexport const GRAPHWEAVER_TARGET_VERSION = version;\nexport const MIKRO_ORM_TARGET_VERSION = '5.4.2';\nexport const AWS_LAMBDA_VERSION = '2.0.1';\n", "import { GRAPHWEAVER_TARGET_VERSION, MIKRO_ORM_TARGET_VERSION } from './constants';\n\nexport enum Backend {\n\tMikroOrmPostgres,\n\tMikroOrmMysql,\n\tREST,\n}\n\nexport const packagesForBackend = (backend: Backend): Record<string, string> => {\n\tswitch (backend) {\n\t\tcase Backend.MikroOrmPostgres:\n\t\t\treturn {\n\t\t\t\t'@exogee/graphweaver-mikroorm': GRAPHWEAVER_TARGET_VERSION,\n\t\t\t\t'@exogee/graphweaver-apollo': GRAPHWEAVER_TARGET_VERSION,\n\t\t\t\t'@mikro-orm/core': MIKRO_ORM_TARGET_VERSION,\n\t\t\t\t'@mikro-orm/postgresql': MIKRO_ORM_TARGET_VERSION,\n\t\t\t};\n\n\t\tcase Backend.MikroOrmMysql:\n\t\t\treturn {\n\t\t\t\t'@exogee/graphweaver-mikroorm': GRAPHWEAVER_TARGET_VERSION,\n\t\t\t\t'@exogee/graphweaver-apollo': GRAPHWEAVER_TARGET_VERSION,\n\t\t\t\t'@mikro-orm/core': MIKRO_ORM_TARGET_VERSION,\n\t\t\t\t'@mikro-orm/mysql': MIKRO_ORM_TARGET_VERSION,\n\t\t\t};\n\n\t\tcase Backend.REST:\n\t\t\treturn {\n\t\t\t\t'@exogee/graphweaver-rest': GRAPHWEAVER_TARGET_VERSION,\n\t\t\t};\n\t}\n};\n", "import { writeFileSync, mkdirSync, readFileSync } from 'fs';\nimport { dirname } from 'path';\nimport { Octokit } from '@octokit/rest';\nimport { throttling } from '@octokit/plugin-throttling';\nimport { GRAPHWEAVER_TARGET_VERSION } from '../constants';\n\nconst owner = 'exogee-technology';\nconst repo = 'graphweaver';\nconst root = 'src/examples';\n\ntype Branch = {\n\tpath: string;\n\ttype: 'file' | 'submodule' | 'symlink';\n\tsha: string;\n};\n\ntype File = {\n\tpath: string;\n\tcontents: Buffer;\n};\n\nconst createDirectories = async (filepath: string) => {\n\tconst dir = dirname(filepath);\n\treturn mkdirSync(dir, { recursive: true });\n};\n\nconst formatPath = (file: File, projectName: string, exampleName: string): string => {\n\tconst path = file.path.replace(`${root}/${exampleName}`, '');\n\treturn `${projectName}/${path}`;\n};\n\nconst output = async (file: File, projectName: string, exampleName: string) => {\n\tconst path = formatPath(file, projectName, exampleName);\n\tawait createDirectories(path);\n\twriteFileSync(path, file.contents);\n};\n\nexport class Downloader {\n\toctokit: Octokit;\n\n\tconstructor() {\n\t\tconst ThrottledOctokit = Octokit.plugin(throttling);\n\t\tthis.octokit = new ThrottledOctokit({\n\t\t\tthrottle: {\n\t\t\t\tonSecondaryRateLimit: (retryAfter, options) => {\n\t\t\t\t\t/* ... */\n\t\t\t\t},\n\t\t\t\tonRateLimit: (retryAfter, options) => {\n\t\t\t\t\t/* ... */\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t}\n\n\tasync recurseTree(path: string): Promise<Branch[]> {\n\t\tconst { data } = await this.octokit.repos.getContent({\n\t\t\towner,\n\t\t\trepo,\n\t\t\tpath,\n\t\t});\n\n\t\tif (!Array.isArray(data)) throw new Error('Expected Array');\n\n\t\tconst recurseDirs = data.map(async (node) => {\n\t\t\tif (node.type === 'dir') {\n\t\t\t\treturn this.recurseTree(node.path);\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tpath: node.path,\n\t\t\t\ttype: node.type,\n\t\t\t\tsha: node.sha,\n\t\t\t};\n\t\t});\n\n\t\treturn Promise.all(recurseDirs).then((nodes) => nodes.flat());\n\t}\n\n\tasync fetchFiles(exampleName: string) {\n\t\tconst path = `${root}/${exampleName}`;\n\t\tconst tree = await this.recurseTree(path);\n\n\t\tconst files = tree\n\t\t\t.filter((node) => node.path.startsWith(path) && node.type === 'file')\n\t\t\t.map(async (node) => {\n\t\t\t\tconst { data } = await this.octokit.git.getBlob({\n\t\t\t\t\towner,\n\t\t\t\t\trepo,\n\t\t\t\t\tfile_sha: node.sha,\n\t\t\t\t});\n\t\t\t\treturn {\n\t\t\t\t\tpath: node.path,\n\t\t\t\t\tcontents: Buffer.from(data.content, data.encoding as BufferEncoding),\n\t\t\t\t};\n\t\t\t});\n\n\t\treturn Promise.all(files);\n\t}\n\n\tasync download(projectName: string, exampleName: string) {\n\t\tconst files = await this.fetchFiles(exampleName);\n\t\tawait Promise.all(files.map((file) => output(file, projectName, exampleName)));\n\n\t\t// Update the versions in the package json\n\t\tconst packageJson = readFileSync(`${projectName}/package.json`, 'utf8');\n\t\twriteFileSync(\n\t\t\t`${projectName}/package.json`,\n\t\t\tpackageJson.replaceAll('workspace:*', GRAPHWEAVER_TARGET_VERSION)\n\t\t);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["import_fs", "yargs", "chokidar"]
}
