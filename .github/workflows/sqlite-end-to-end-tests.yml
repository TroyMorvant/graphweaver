name: SQLite End to End Tests

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  sqlite-end-to-end-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: src

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - uses: actions/cache@v3
        env:
          cache-name: cache-pnpm-modules
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.node-version }}-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.node-version }}-

      - uses: pnpm/action-setup@v2.2.4
        with:
          version: 8.6.9

      - uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "pnpm"
          cache-dependency-path: src/pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm i

      - name: Check formatting
        run: pnpm lint

      - name: Build CLI tool
        run: pnpm build

      - name: Get installed Playwright version
        id: playwright-version
        run: echo "::set-output name=version::$(pnpm why --json @playwright/test | grep -h 'workspace:.' | jq --raw-output '.children[].locator' | sed -e 's/@playwright\/test@.*://')"

      # Attempt to restore the correct Playwright browser binaries based on the
      # currently installed version of Playwright (The browser binary versions
      # may change with Playwright versions).
      # Note: Playwright's cache directory is hard coded because that's what it
      # says to do in the docs. There doesn't appear to be a command that prints
      # it out for us.
      - uses: actions/cache@v3
        id: playwright-cache
        with:
          path: '~/.cache/ms-playwright'
          key: '${{ runner.os }}-playwright-${{ steps.playwright-version.outputs.version }}'
          # As a fallback, if the Playwright version has changed, try use the
          # most recently cached version. There's a good chance that at least one
          # of the browser binary versions haven't been updated, so Playwright can
          # skip installing that in the next step.
          # Note: When falling back to an old cache, `cache-hit` (used below)
          # will be `false`. This allows us to restore the potentially out of
          # date cache, but still let Playwright decide if it needs to download
          # new binaries or not.
          restore-keys: |
            ${{ runner.os }}-playwright-

      # If the Playwright browser binaries weren't able to be restored, we tell
      # playwright to install everything for us.
      - name: Install Playwright's dependencies
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        working-directory: src/packages/end-to-end
        run: npx playwright install --with-deps chromium

      - name: Init and Import SQLite Chinook Database
        working-directory: src/packages/end-to-end
        run: |
          pnpm import-database-sqlite

      - name: Start and Test GW instance
        working-directory: src/packages/end-to-end
        timeout-minutes: 2
        run: |
          pnpm start-server &
          sleep 3 &&
          pnpm test-sqlite &&
          pnpm test-ui &&
          killall node

      - name: Add Native Module
        # This step is expected to fail, as we sqlite3 contains native code
        working-directory: src/packages/end-to-end/app
        id: native-module
        run: |
          pnpm add sqlite3
          pnpm build
        continue-on-error: true

      - name: Check Native Module Failures
        # If the native module build succeeds, we want to fail the build as the native module is not supported
        if: steps.native-module.outcome == 'success'
        run: exit 1

      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: src/packages/end-to-end/playwright-report/
          retention-days: 30

        env:
          CI: true
